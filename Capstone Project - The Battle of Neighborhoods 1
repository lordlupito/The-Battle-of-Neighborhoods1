{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Solving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/conda/envs/Python36\n\n  added / updated specs: \n    - folium=0.5.0\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    ca-certificates-2020.6.20  |       hecda079_0         145 KB  conda-forge\n    python_abi-3.6             |          1_cp36m           4 KB  conda-forge\n    altair-4.1.0               |             py_1         614 KB  conda-forge\n    openssl-1.1.1g             |       h516909a_0         2.1 MB  conda-forge\n    vincent-0.4.4              |             py_1          28 KB  conda-forge\n    folium-0.5.0               |             py_0          45 KB  conda-forge\n    certifi-2020.6.20          |   py36h9f0ad1d_0         151 KB  conda-forge\n    branca-0.4.1               |             py_0          26 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:         3.1 MB\n\nThe following NEW packages will be INSTALLED:\n\n    altair:          4.1.0-py_1        conda-forge\n    branca:          0.4.1-py_0        conda-forge\n    folium:          0.5.0-py_0        conda-forge\n    python_abi:      3.6-1_cp36m       conda-forge\n    vincent:         0.4.4-py_1        conda-forge\n\nThe following packages will be UPDATED:\n\n    ca-certificates: 2020.1.1-0                    --> 2020.6.20-hecda079_0     conda-forge\n    certifi:         2020.6.20-py36_0              --> 2020.6.20-py36h9f0ad1d_0 conda-forge\n    openssl:         1.1.1g-h7b6447c_0             --> 1.1.1g-h516909a_0        conda-forge\n\n\nDownloading and Extracting Packages\nca-certificates-2020 | 145 KB    | ##################################### | 100% \npython_abi-3.6       | 4 KB      | ##################################### | 100% \naltair-4.1.0         | 614 KB    | ##################################### | 100% \nopenssl-1.1.1g       | 2.1 MB    | ##################################### | 100% \nvincent-0.4.4        | 28 KB     | ##################################### | 100% \nfolium-0.5.0         | 45 KB     | ##################################### | 100% \ncertifi-2020.6.20    | 151 KB    | ##################################### | 100% \nbranca-0.4.1         | 26 KB     | ##################################### | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\nLibraries imported.\n"
                }
            ],
            "source": "import numpy as np # library to handle data in a vectorized manner\nimport time\nimport pandas as pd # library for data analsysis\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport json # library to handle JSON files\nimport requests # library to handle requests\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\nimport folium # map rendering library\n\nprint('Libraries imported.')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# Coursera Capstone - REPORT CONTENT"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "1. Introduction Section : \u2043 Discussion of the business problem and the interested audience in this project.\n2. Data Section: \u2043 Description of the data that will be used to solve the problem and the sources.\n3. Methodology section \u2043 Discussion and description of exploratory data analysis carried out, any inferential statistical testing performed, and if any machine learnings were used establishing the strategy and purposes.\n4. Results section \u2043 Discussion of the results.\n5. Discussion section \u2043 Elaboration and discussion on any observations noted and any recommendations suggested based on the results.\n6. Conclusion section \u2043 Report Conclusion."
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": "# A description of the problem and a discussion of the background. (15 marks)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# 1. Introduction Section :"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Discussion of the business problem and the audience who would be interested in this project."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Description of the Problem and Background"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Scenario:\n\nI am a data scientist residing in Downtown Singapore. I currently live within walking distance to Downtown Telok Ayer MRT metro station and I enjoy many ammenities and venues in the area, such as various international cousine restaurants, cafes, food shops and entertainment. I have been offered a great opportunity to work for a leader firm in Manhattan, NY. I am very excited and I want to use this opportunity to practice my learnings in Coursera in order to answer relevant questions arisen. The key question is : How can I find a convenient and enjoyable place similar to mine now in Singapore? Certainly, I can use available real estate apps and Google but the idea is to use and apply myself the learned tools during the course. In order to make a comparison and evaluation of the rental options in Manhattan NY, I must set some basis, therefore the apartment in Manhattan must meet the following demands:\n\n1. apartment must be 2 or 3 bedrooms\n2. desired location is near a metro station in the Manhattan area and within 1.0 mile (1.6 km) radius\n3. price of rent not exceed $7,000 per month\n4. top ammenities in the selected neighborhood shall be similar to current residence\n5. desirable to have venues such as coffee shops, restaurants Asian Thai, wine stores, gym and food shops\n6. as a reference, I have included a map of venues near current residence in Singapore."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Business Problem:\n\nThe challenge is to find a suitable apartment for rent in Manhattan NY that complies with the demands on location, price and venues. The data required to resolve this challenge is described in the following section 2, below.\n\nInterested Audience:\n\nI believe this is a relevant challenge with valid questions for anyone moving to other large city in US, EU or Asia. The same methodology can be applied in accordance to demands as applicable. This case is also applicable for anyone interested in exploring starting or locating a new business in any city. Lastly, it can also serve as a good practical exercise to develop Data Science skills."
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": "# A description of the data and how it will be used to solve the problem. (15 marks)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# 2. Data Section:"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "Description of the data and its sources that will be used to solve the problem\n\nDescription of the Data:\n\nThe following data is required to answer the issues of the problem:\n\n1. List of Boroughs and neighborhoods of Manhattan with their geodata (latitud and longitud)\n2. List of Subway metro stations in Manhattan with their address location\n3. List of apartments for rent in Manhattan area with their addresses and price\n4. Preferably, a list of apartment for rent with additional information, such as price, address, area, # of beds, etc\n5. Venues for each Manhattan neighborhood ( than can be clustered)\n6. Venues for subway metro stations, as needed\n\nHow the data will be used to solve the problem\n\nThe data will be used as follows:\n\n1. Use Foursquare and geopy data to map top 10 venues for all Manhattan neighborhoods and clustered in groups ( as per Course LAB)\n2. Use foursquare and geopy data to map the location of subway metro stations , separately and on top of the above clustered map in order to be able to identify the venues and ammenities near each metro station, or explore each subway location separately\n3. Use Foursquare and geopy data to map the location of rental places, in some form, linked to the subway locations.\n4. create a map that depicts, for instance, the average rental price per square ft, around a radious of 1.0 mile (1.6 km) around each subway station - or a similar metrics. I will be able to quickly point to the popups to know the relative price per subway area.\n5. Addresses from rental locations will be converted to geodata( lat, long) using Geopy-distance and Nominatim.\n6. Data will be searched in open data sources if available, from real estate sites if open to reading, libraries or other government agencies such as Metro New York MTA, etc.\n\nThe procesing of these DATA will allow to answer the key questions to make a decision:\n\n1. what is the cost of rent (per square ft) around a mile radius from each subway metro station?\n2. what is the area of Manhattan with best rental pricing that meets criteria established?\n3. What is the distance from work place ( Park Ave and 53 rd St) and the tentative future home?\n4. What are the venues of the two best places to live? How the prices compare?\n5. How venues distribute among Manhattan neighborhoods and around metro stations?\n6. Are there tradeoffs between size and price and location?\n7. Any other interesting statistical data findings of the real estate and overall data.\n\n\n\nReference of venues around current residence in Singapore for comparison to Manhattan place\n"
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "The geograpical coordinate of Singapore home are 1.2784801, 103.8493717.\n"
                },
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": "/opt/conda/envs/Python36/lib/python3.6/site-packages/ipykernel/__main__.py:3: DeprecationWarning: Using Nominatim with the default \"geopy/1.18.1\" `user_agent` is strongly discouraged, as it violates Nominatim's ToS https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please specify a custom `user_agent` with `Nominatim(user_agent=\"my-application\")` or by overriding the default `user_agent`: `geopy.geocoders.options.default_user_agent = \"my-application\"`. In geopy 2.0 this will become an exception.\n  app.launch_new_instance()\n"
                }
            ],
            "source": "address = 'Mccallum Street, Singapore'\n\ngeolocator = Nominatim()\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Singapore home are {}, {}.'.format(latitude, longitude))"
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [],
            "source": "neighborhood_latitude=1.2792655\nneighborhood_longitude=103.8480938"
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [],
            "source": "# The code was removed by Watson Studio for sharing."
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Your credentails:\nCLIENT_ID: GL30Y4CYRK2T5A4DMVREAIJXGDS0DAORWW1IYC0PN45EURYE\nCLIENT_SECRET:V4W3BM2ROHNV1352RYIOBHU54OPLOK52K2MGDH33F3T4NPI1\n"
                }
            ],
            "source": "CLIENT_ID = 'GL30Y4CYRK2T5A4DMVREAIJXGDS0DAORWW1IYC0PN45EURYE' # your Foursquare ID\nCLIENT_SECRET = 'V4W3BM2ROHNV1352RYIOBHU54OPLOK52K2MGDH33F3T4NPI1' # your Foursquare Secret\nVERSION = '20180605' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)"
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "'https://api.foursquare.com/v2/venues/explore?&client_id=GL30Y4CYRK2T5A4DMVREAIJXGDS0DAORWW1IYC0PN45EURYE&client_secret=V4W3BM2ROHNV1352RYIOBHU54OPLOK52K2MGDH33F3T4NPI1&v=20180605&ll=1.2792655,103.8480938&radius=500&limit=100'"
                    },
                    "execution_count": 14,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "LIMIT = 100 # limit of number of venues returned by Foursquare API\nradius = 500 # define radius\n\n# create URL\nurl = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n    CLIENT_ID, \n    CLIENT_SECRET, \n    VERSION, \n    neighborhood_latitude, \n    neighborhood_longitude, \n    radius, \n    LIMIT)\nurl # display URL"
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [],
            "source": "results = requests.get(url).json()\n#results"
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [],
            "source": "# function that extracts the category of the venue\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']"
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>categories</th>\n      <th>lat</th>\n      <th>lng</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Napoleon Food &amp; Wine Bar</td>\n      <td>Wine Bar</td>\n      <td>1.279925</td>\n      <td>103.847333</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Native</td>\n      <td>Cocktail Bar</td>\n      <td>1.280135</td>\n      <td>103.846844</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Park Bench Deli</td>\n      <td>Deli / Bodega</td>\n      <td>1.279872</td>\n      <td>103.847287</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Freehouse</td>\n      <td>Beer Garden</td>\n      <td>1.281254</td>\n      <td>103.848513</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Pepper Bowl</td>\n      <td>Asian Restaurant</td>\n      <td>1.279371</td>\n      <td>103.846710</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mellower Coffee</td>\n      <td>Caf\u00e9</td>\n      <td>1.277814</td>\n      <td>103.848188</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Meat Smith</td>\n      <td>Southern / Soul Food Restaurant</td>\n      <td>1.280205</td>\n      <td>103.847410</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Anglo Indian Cafe &amp; Bar</td>\n      <td>Indian Restaurant</td>\n      <td>1.279084</td>\n      <td>103.850127</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Sofitel So Singapore</td>\n      <td>Hotel</td>\n      <td>1.280017</td>\n      <td>103.849813</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Lau Pa Sat Satay Street</td>\n      <td>Street Food Gathering</td>\n      <td>1.280261</td>\n      <td>103.850235</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                       name                       categories       lat  \\\n0  Napoleon Food & Wine Bar                         Wine Bar  1.279925   \n1                    Native                     Cocktail Bar  1.280135   \n2           Park Bench Deli                    Deli / Bodega  1.279872   \n3                 Freehouse                      Beer Garden  1.281254   \n4               Pepper Bowl                 Asian Restaurant  1.279371   \n5           Mellower Coffee                             Caf\u00e9  1.277814   \n6                Meat Smith  Southern / Soul Food Restaurant  1.280205   \n7   Anglo Indian Cafe & Bar                Indian Restaurant  1.279084   \n8      Sofitel So Singapore                            Hotel  1.280017   \n9   Lau Pa Sat Satay Street            Street Food Gathering  1.280261   \n\n          lng  \n0  103.847333  \n1  103.846844  \n2  103.847287  \n3  103.848513  \n4  103.846710  \n5  103.848188  \n6  103.847410  \n7  103.850127  \n8  103.849813  \n9  103.850235  "
                    },
                    "execution_count": 17,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "venues = results['response']['groups'][0]['items']\n    \nSGnearby_venues = json_normalize(venues) # flatten JSON\n\n# filter columns\nfiltered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\nSGnearby_venues =SGnearby_venues.loc[:, filtered_columns]\n\n# filter the category for each row\nSGnearby_venues['venue.categories'] = SGnearby_venues.apply(get_category_type, axis=1)\n\n# clean columns\nSGnearby_venues.columns = [col.split(\".\")[-1] for col in SGnearby_venues.columns]\n\nSGnearby_venues.head(10)"
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html=PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVMgPSBmYWxzZTsgTF9OT19UT1VDSCA9IGZhbHNlOyBMX0RJU0FCTEVfM0QgPSBmYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdnaXQuY29tL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9tYXN0ZXIvZm9saXVtL3RlbXBsYXRlcy9sZWFmbGV0LmF3ZXNvbWUucm90YXRlLmNzcyIvPgogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIAogICAgICAgICAgICA8c3R5bGU+ICNtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMgewogICAgICAgICAgICAgICAgcG9zaXRpb24gOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIHdpZHRoIDogMTAwLjAlOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xlYWZsZXQtZHZmLzAuMy4wL2xlYWZsZXQtZHZmLm1hcmtlcnMubWluLmpzIj48L3NjcmlwdD4KPC9oZWFkPgo8Ym9keT4gICAgCiAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9saXVtLW1hcCIgaWQ9Im1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1MyIgPjwvZGl2PgogICAgICAgIAo8L2JvZHk+CjxzY3JpcHQ+ICAgIAogICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBudWxsOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHZhciBtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMgPSBMLm1hcCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NlbnRlcjogWzEuMjc4NDgwMSwxMDMuODQ5MzcxN10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiAyMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEJvdW5kczogYm91bmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmxkQ29weUp1bXA6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JzOiBMLkNSUy5FUFNHMzg1NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHRpbGVfbGF5ZXJfY2MzZDdiZDQ5NjZkNDJlN2FkOGNiYzBkZmRiZjUxMzcgPSBMLnRpbGVMYXllcigKICAgICAgICAgICAgICAgICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgICAgICAgICB7CiAgImF0dHJpYnV0aW9uIjogbnVsbCwKICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgIm1heFpvb20iOiAxOCwKICAibWluWm9vbSI6IDEsCiAgIm5vV3JhcCI6IGZhbHNlLAogICJzdWJkb21haW5zIjogImFiYyIKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2ViOGJjZjBhNzBlYjQ5NmM5ZGZjZDE2ZjBhODM4NGE2ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzk5MjQ5Mzg3NDM5MjA0LDEwMy44NDczMzMwMDU3NDI4OCksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzAyOWQ5MTgyODM1NjRhZTc4OTMzOGM0MWM0ZjAwZWFjID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzNkZDczYWM1ODRmYzQzMDZhZGNjNzRkYmMzZWRlNThjID0gJCgnPGRpdiBpZD0iaHRtbF8zZGQ3M2FjNTg0ZmM0MzA2YWRjYzc0ZGJjM2VkZTU4YyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+TmFwb2xlb24gRm9vZCAmYW1wOyBXaW5lIEJhcjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMDI5ZDkxODI4MzU2NGFlNzg5MzM4YzQxYzRmMDBlYWMuc2V0Q29udGVudChodG1sXzNkZDczYWM1ODRmYzQzMDZhZGNjNzRkYmMzZWRlNThjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2ViOGJjZjBhNzBlYjQ5NmM5ZGZjZDE2ZjBhODM4NGE2LmJpbmRQb3B1cChwb3B1cF8wMjlkOTE4MjgzNTY0YWU3ODkzMzhjNDFjNGYwMGVhYyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85Y2NlMzI3ZDQ3YTY0ZWJkODYzMTQyZmNjZmEzNTI2ZiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMTM1NDI0NDE0Njk1OSwxMDMuODQ2ODQ0MzA4MDI4MDUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kNTZlMDAzNmEzODI0NjNmOGFlNmM3YTgyYTcyYzU3YyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lMTFjMGVjYzBiZjg0N2MxOTIxN2I4MjBhY2ZhZWIwMyA9ICQoJzxkaXYgaWQ9Imh0bWxfZTExYzBlY2MwYmY4NDdjMTkyMTdiODIwYWNmYWViMDMiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk5hdGl2ZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDU2ZTAwMzZhMzgyNDYzZjhhZTZjN2E4MmE3MmM1N2Muc2V0Q29udGVudChodG1sX2UxMWMwZWNjMGJmODQ3YzE5MjE3YjgyMGFjZmFlYjAzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzljY2UzMjdkNDdhNjRlYmQ4NjMxNDJmY2NmYTM1MjZmLmJpbmRQb3B1cChwb3B1cF9kNTZlMDAzNmEzODI0NjNmOGFlNmM3YTgyYTcyYzU3Yyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9jYmQ3OThlMzAxMWU0MjIzOWRhOWZkNmU2NTE2ZmQ1YSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5ODcyMzYwODc1OTQzMiwxMDMuODQ3Mjg3MTAxMTI3MDUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84MzRmM2RlNzIxZDE0ZGZhYmM3YzllNWI3MTdlMWUyMiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yMDRiMzYzNjY3NGU0YjUyOWJkOTlhNTU5NzYzOGUyYiA9ICQoJzxkaXYgaWQ9Imh0bWxfMjA0YjM2MzY2NzRlNGI1MjliZDk5YTU1OTc2MzhlMmIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlBhcmsgQmVuY2ggRGVsaTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfODM0ZjNkZTcyMWQxNGRmYWJjN2M5ZTViNzE3ZTFlMjIuc2V0Q29udGVudChodG1sXzIwNGIzNjM2Njc0ZTRiNTI5YmQ5OWE1NTk3NjM4ZTJiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2NiZDc5OGUzMDExZTQyMjM5ZGE5ZmQ2ZTY1MTZmZDVhLmJpbmRQb3B1cChwb3B1cF84MzRmM2RlNzIxZDE0ZGZhYmM3YzllNWI3MTdlMWUyMik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xMmZhOWFiMDI4ZTA0NTA5OTYyMzFiMzYyNmIyYTE5ZCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxMjU0NDkxNTU5NjIzOCwxMDMuODQ4NTEyODgwODkyOSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzdiMTRkNWVjYzhmOTQwMTliMjNlNTYwMWE5NDViNGJhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2QzNzVjMzAwYjJhNDQ2ZGJhODA1YmI2ZmM3ZGUzYjJkID0gJCgnPGRpdiBpZD0iaHRtbF9kMzc1YzMwMGIyYTQ0NmRiYTgwNWJiNmZjN2RlM2IyZCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+RnJlZWhvdXNlPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF83YjE0ZDVlY2M4Zjk0MDE5YjIzZTU2MDFhOTQ1YjRiYS5zZXRDb250ZW50KGh0bWxfZDM3NWMzMDBiMmE0NDZkYmE4MDViYjZmYzdkZTNiMmQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMTJmYTlhYjAyOGUwNDUwOTk2MjMxYjM2MjZiMmExOWQuYmluZFBvcHVwKHBvcHVwXzdiMTRkNWVjYzhmOTQwMTliMjNlNTYwMWE5NDViNGJhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzZlNjg0YmY3NDYwMDQyMmU5OGZhNmNjOTZiMzJhMGU1ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzkzNzEsMTAzLjg0NjcxKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOTM3ODlmMWZhNWJhNDlmYzliZDM2MzY5NjY4Y2ZjZmIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNDAwMjcyZDFjMWJhNDgwZmE3ZjRkZjBlMmVhNjYyNDUgPSAkKCc8ZGl2IGlkPSJodG1sXzQwMDI3MmQxYzFiYTQ4MGZhN2Y0ZGYwZTJlYTY2MjQ1IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5QZXBwZXIgQm93bDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTM3ODlmMWZhNWJhNDlmYzliZDM2MzY5NjY4Y2ZjZmIuc2V0Q29udGVudChodG1sXzQwMDI3MmQxYzFiYTQ4MGZhN2Y0ZGYwZTJlYTY2MjQ1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzZlNjg0YmY3NDYwMDQyMmU5OGZhNmNjOTZiMzJhMGU1LmJpbmRQb3B1cChwb3B1cF85Mzc4OWYxZmE1YmE0OWZjOWJkMzYzNjk2NjhjZmNmYik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl84NWFiN2U2MzQ5ZTM0YTliOGU3YjkwZGFlNzU0MWY2MyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc3ODE0MTA2NTA4NzA1NCwxMDMuODQ4MTg3ODE2MTczNTQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85OWNlNGU2ZmMyZmI0MjYzYmNkMjE2ODM1NjdkMzI3MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83ZmZlZDlmYTNiZWM0ODRlYjMzNmMyYWYzYjkzYWQyMCA9ICQoJzxkaXYgaWQ9Imh0bWxfN2ZmZWQ5ZmEzYmVjNDg0ZWIzMzZjMmFmM2I5M2FkMjAiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk1lbGxvd2VyIENvZmZlZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTljZTRlNmZjMmZiNDI2M2JjZDIxNjgzNTY3ZDMyNzEuc2V0Q29udGVudChodG1sXzdmZmVkOWZhM2JlYzQ4NGViMzM2YzJhZjNiOTNhZDIwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzg1YWI3ZTYzNDllMzRhOWI4ZTdiOTBkYWU3NTQxZjYzLmJpbmRQb3B1cChwb3B1cF85OWNlNGU2ZmMyZmI0MjYzYmNkMjE2ODM1NjdkMzI3MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8wNmFmZDhlYTJiZjQ0YTI3YmY3OGU1NjRlM2QwODUxYSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMjA0OTQxMDg1NTQ0NywxMDMuODQ3NDEwNDkwMTkzNyksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzU1ZmQyZTQ5MDUwNTQ3YWQ4OTFkOGRlOTg4N2ZlOThhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzBmZDY3NjcwOGU5MDRmYzc5YTNmYTA2YjBlZjY3NzcyID0gJCgnPGRpdiBpZD0iaHRtbF8wZmQ2NzY3MDhlOTA0ZmM3OWEzZmEwNmIwZWY2Nzc3MiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+TWVhdCBTbWl0aDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNTVmZDJlNDkwNTA1NDdhZDg5MWQ4ZGU5ODg3ZmU5OGEuc2V0Q29udGVudChodG1sXzBmZDY3NjcwOGU5MDRmYzc5YTNmYTA2YjBlZjY3NzcyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzA2YWZkOGVhMmJmNDRhMjdiZjc4ZTU2NGUzZDA4NTFhLmJpbmRQb3B1cChwb3B1cF81NWZkMmU0OTA1MDU0N2FkODkxZDhkZTk4ODdmZTk4YSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9hMDVkY2MyNDI5MmM0ZDlhOGZkNjk2YTQzMGM1OGM0MCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5MDgzNjQ4MzAzOTY2NSwxMDMuODUwMTI2Nzc4OTQyNzgpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iZmRhMDQ5YWMzNDI0ZmI1ODk2YmViYTMyNGRlNTQ4NyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jMzFmMjg0NzMzY2Y0YTVmYjI4N2QxNDAyZjE3MWYxYiA9ICQoJzxkaXYgaWQ9Imh0bWxfYzMxZjI4NDczM2NmNGE1ZmIyODdkMTQwMmYxNzFmMWIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkFuZ2xvIEluZGlhbiBDYWZlICZhbXA7IEJhcjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYmZkYTA0OWFjMzQyNGZiNTg5NmJlYmEzMjRkZTU0ODcuc2V0Q29udGVudChodG1sX2MzMWYyODQ3MzNjZjRhNWZiMjg3ZDE0MDJmMTcxZjFiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2EwNWRjYzI0MjkyYzRkOWE4ZmQ2OTZhNDMwYzU4YzQwLmJpbmRQb3B1cChwb3B1cF9iZmRhMDQ5YWMzNDI0ZmI1ODk2YmViYTMyNGRlNTQ4Nyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82MTk3NDVjYzc3MjU0MjZmODdkYmMxMTA1ZWViNmFmNyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMDE2ODE1Mzk3MTQ2LDEwMy44NDk4MTMxNDI4MDc3NiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2ZkZTJiNjQ4NDhhNTQ1MjhiNWM0NTdlODIyNmQ4OThkID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzNlZDY1ZDIxMmEwMDQzYTJhZTgzMGY0NTc0MmEyYTZhID0gJCgnPGRpdiBpZD0iaHRtbF8zZWQ2NWQyMTJhMDA0M2EyYWU4MzBmNDU3NDJhMmE2YSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U29maXRlbCBTbyBTaW5nYXBvcmU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2ZkZTJiNjQ4NDhhNTQ1MjhiNWM0NTdlODIyNmQ4OThkLnNldENvbnRlbnQoaHRtbF8zZWQ2NWQyMTJhMDA0M2EyYWU4MzBmNDU3NDJhMmE2YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82MTk3NDVjYzc3MjU0MjZmODdkYmMxMTA1ZWViNmFmNy5iaW5kUG9wdXAocG9wdXBfZmRlMmI2NDg0OGE1NDUyOGI1YzQ1N2U4MjI2ZDg5OGQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfYzNmYzZiN2IzMmY3NGQyZjgxYzI4N2VlZWQ1ZjNhM2YgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDI2MSwxMDMuODUwMjM1KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZGNjZGZjM2Y2YzQyNDgxZWExMmZlMTc3OWJiNjllZGMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOGQzODk5ODdkNTFkNGNjZGIzM2NjMDgyMWYzZThlNGMgPSAkKCc8ZGl2IGlkPSJodG1sXzhkMzg5OTg3ZDUxZDRjY2RiMzNjYzA4MjFmM2U4ZTRjIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MYXUgUGEgU2F0IFNhdGF5IFN0cmVldDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZGNjZGZjM2Y2YzQyNDgxZWExMmZlMTc3OWJiNjllZGMuc2V0Q29udGVudChodG1sXzhkMzg5OTg3ZDUxZDRjY2RiMzNjYzA4MjFmM2U4ZTRjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2MzZmM2YjdiMzJmNzRkMmY4MWMyODdlZWVkNWYzYTNmLmJpbmRQb3B1cChwb3B1cF9kY2NkZmMzZjZjNDI0ODFlYTEyZmUxNzc5YmI2OWVkYyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl84ZDJkZjQ3OTczNDQ0MDBiYjZmOTVlZGVjMTRkMzk0ZCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwNDY4NDM3Njc2MzU3OCwxMDMuODQ2MjY0Mjg3NjE1MiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzJiZGExNWRlNGJlYjQ1ZGJhNDRlNWRkZGM1Mjk0MGY5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzIzNTI4YjcyZjhlNDQ2MjE5NTM1ZjFhZTFjMjdkMjM4ID0gJCgnPGRpdiBpZD0iaHRtbF8yMzUyOGI3MmY4ZTQ0NjIxOTUzNWYxYWUxYzI3ZDIzOCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+UFMuQ2FmZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMmJkYTE1ZGU0YmViNDVkYmE0NGU1ZGRkYzUyOTQwZjkuc2V0Q29udGVudChodG1sXzIzNTI4YjcyZjhlNDQ2MjE5NTM1ZjFhZTFjMjdkMjM4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzhkMmRmNDc5NzM0NDQwMGJiNmY5NWVkZWMxNGQzOTRkLmJpbmRQb3B1cChwb3B1cF8yYmRhMTVkZTRiZWI0NWRiYTQ0ZTVkZGRjNTI5NDBmOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82YTFjNzIxNmNjZGM0MGQ4OTAzZjE0YWFkOGM2MGIxYSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwNDgzMTgzMzA5NzE3NCwxMDMuODQ2OTQxNTEwNzE1MTQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iMDhkMWQwZTM4ZGM0NzcyOGQ5YjhhZmY3NTJjODc4MyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wYzkxN2ExYzY2YmQ0NzIxYWU5OGY3Y2ViMWE3NzVjNCA9ICQoJzxkaXYgaWQ9Imh0bWxfMGM5MTdhMWM2NmJkNDcyMWFlOThmN2NlYjFhNzc1YzQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkR1bXBsaW5nIERhcmxpbmdzPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9iMDhkMWQwZTM4ZGM0NzcyOGQ5YjhhZmY3NTJjODc4My5zZXRDb250ZW50KGh0bWxfMGM5MTdhMWM2NmJkNDcyMWFlOThmN2NlYjFhNzc1YzQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNmExYzcyMTZjY2RjNDBkODkwM2YxNGFhZDhjNjBiMWEuYmluZFBvcHVwKHBvcHVwX2IwOGQxZDBlMzhkYzQ3NzI4ZDliOGFmZjc1MmM4NzgzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzQ0OGNjYjMwNDgwYTQ2NWQ4NTUxOWMxMWUyNjUxYjFmID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzcwNTQ2MjAwMTY2ODM1LDEwMy44NDY0MzU0MjA2MTAxOSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2YzMjY1M2ViZTQxNTQxYWM4NzAwMjk0MDM2NjAyZDAwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2JlMWQ2ZjAxZjlkNTQwZDliOGFjNTc3NGIwNDExNTZiID0gJCgnPGRpdiBpZD0iaHRtbF9iZTFkNmYwMWY5ZDU0MGQ5YjhhYzU3NzRiMDQxMTU2YiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+VmlyZ2luIEFjdGl2ZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjMyNjUzZWJlNDE1NDFhYzg3MDAyOTQwMzY2MDJkMDAuc2V0Q29udGVudChodG1sX2JlMWQ2ZjAxZjlkNTQwZDliOGFjNTc3NGIwNDExNTZiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzQ0OGNjYjMwNDgwYTQ2NWQ4NTUxOWMxMWUyNjUxYjFmLmJpbmRQb3B1cChwb3B1cF9mMzI2NTNlYmU0MTU0MWFjODcwMDI5NDAzNjYwMmQwMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kYjk5OWJiNDgwY2E0MDU4OWU0MWE4Njg3OTdlMzdlNiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5MTAwMDczNjI0MTIxNiwxMDMuODQ3MzkyMjIwMTEzNTUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iMjFmNGZiZjcxYjE0YjdkODZmMWIxMzAyNzBhZWQyZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80NmIzZWExODY1YjM0YzE2YTZmZTM2ZTk1MDFjMjJjMCA9ICQoJzxkaXYgaWQ9Imh0bWxfNDZiM2VhMTg2NWIzNGMxNmE2ZmUzNmU5NTAxYzIyYzAiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlF1YW4gSmkgQCBBbW95IFN0cmVldCBGb29kIE1hcmtldDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYjIxZjRmYmY3MWIxNGI3ZDg2ZjFiMTMwMjcwYWVkMmYuc2V0Q29udGVudChodG1sXzQ2YjNlYTE4NjViMzRjMTZhNmZlMzZlOTUwMWMyMmMwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2RiOTk5YmI0ODBjYTQwNTg5ZTQxYTg2ODc5N2UzN2U2LmJpbmRQb3B1cChwb3B1cF9iMjFmNGZiZjcxYjE0YjdkODZmMWIxMzAyNzBhZWQyZik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85ZTU4MWZiNzgzYmY0M2JkYTAzMDIzNzA4YjcyMjA1ZCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NTI5MywxMDMuODQ2Njk1KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMDRkY2ExOWQxZDBkNDZiNWIxN2FhNzBkM2QzN2IyMDYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMmE3NjI5ZDE1NDRiNDE2OWIzMWQ5ZDJkNThlNTZmZDAgPSAkKCc8ZGl2IGlkPSJodG1sXzJhNzYyOWQxNTQ0YjQxNjliMzFkOWQyZDU4ZTU2ZmQwIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5Db2ZmZWUgQnJlYWs8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzA0ZGNhMTlkMWQwZDQ2YjViMTdhYTcwZDNkMzdiMjA2LnNldENvbnRlbnQoaHRtbF8yYTc2MjlkMTU0NGI0MTY5YjMxZDlkMmQ1OGU1NmZkMCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85ZTU4MWZiNzgzYmY0M2JkYTAzMDIzNzA4YjcyMjA1ZC5iaW5kUG9wdXAocG9wdXBfMDRkY2ExOWQxZDBkNDZiNWIxN2FhNzBkM2QzN2IyMDYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTBmZjJmYzdhZDgwNDE4MmE4NWMyNmYwNGU1ZGQyYmUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MTI5OTI2MDYwMzgzMjUsMTAzLjg0NzkzMTY0MDg1Nzg0KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjg5NmI1YTdjNTI0NDgwMDhlOTA3YmZjOWFhNjNmZDIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMDc3ZjU5MmRkZWI0NGM3ODg4N2QxNDU5MGFjOTJmOWYgPSAkKCc8ZGl2IGlkPSJodG1sXzA3N2Y1OTJkZGViNDRjNzg4ODdkMTQ1OTBhYzkyZjlmIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5NYWdhbCBCQlEg66eI7Y+s6rCI66ek6riwPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mODk2YjVhN2M1MjQ0ODAwOGU5MDdiZmM5YWE2M2ZkMi5zZXRDb250ZW50KGh0bWxfMDc3ZjU5MmRkZWI0NGM3ODg4N2QxNDU5MGFjOTJmOWYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTBmZjJmYzdhZDgwNDE4MmE4NWMyNmYwNGU1ZGQyYmUuYmluZFBvcHVwKHBvcHVwX2Y4OTZiNWE3YzUyNDQ4MDA4ZTkwN2JmYzlhYTYzZmQyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzViMmZhYzM0NmIwZjRlODg5MjkzOGZkNGY4NzQ2ZDM3ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODEyOTY0NDA4NjAwNjQyLDEwMy44NDg0MzY5MTkyMjM5KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMzFlNzVjMGJhMDM3NDI2YmEwYTRjNWVmODhiYTQ0NDMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYjllYTI0MWRmMDRmNGYzYjg4NTYyNWI1ZTdmNDM3YjEgPSAkKCc8ZGl2IGlkPSJodG1sX2I5ZWEyNDFkZjA0ZjRmM2I4ODU2MjViNWU3ZjQzN2IxIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5GWVIgQ3ljZW5lIE9uZCBEcmluYzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzFlNzVjMGJhMDM3NDI2YmEwYTRjNWVmODhiYTQ0NDMuc2V0Q29udGVudChodG1sX2I5ZWEyNDFkZjA0ZjRmM2I4ODU2MjViNWU3ZjQzN2IxKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzViMmZhYzM0NmIwZjRlODg5MjkzOGZkNGY4NzQ2ZDM3LmJpbmRQb3B1cChwb3B1cF8zMWU3NWMwYmEwMzc0MjZiYTBhNGM1ZWY4OGJhNDQ0Myk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kNzgyNjc1NjQ0N2I0NmE3Yjg1NjQ4NzQwZmZmYTk5OSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxNTI4Njg2MjA0MTgyNCwxMDMuODQ4MTE2OTg4OTcyNzMpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84NGM2Mzc0ODg4Y2U0NmQzYTI3OGIwMzE3YWM1YjQ1NCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81MGM4YzlkOWE3ZWQ0OWVjYjUyM2ZmMGZjNzU2Y2U3ZCA9ICQoJzxkaXYgaWQ9Imh0bWxfNTBjOGM5ZDlhN2VkNDllY2I1MjNmZjBmYzc1NmNlN2QiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlNhcm5pZXM8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzg0YzYzNzQ4ODhjZTQ2ZDNhMjc4YjAzMTdhYzViNDU0LnNldENvbnRlbnQoaHRtbF81MGM4YzlkOWE3ZWQ0OWVjYjUyM2ZmMGZjNzU2Y2U3ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kNzgyNjc1NjQ0N2I0NmE3Yjg1NjQ4NzQwZmZmYTk5OS5iaW5kUG9wdXAocG9wdXBfODRjNjM3NDg4OGNlNDZkM2EyNzhiMDMxN2FjNWI0NTQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNWVmZTMyODY0YmFjNDk5ODgxZWE5OTkxN2E3YmY2MzcgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDQ3OTAzNjUxNTgzMiwxMDMuODQ3NTIxNjA0MDUxNTYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lOGY1ZDMxMGM5YTI0ZWQ4YjM5NTUxMGZlYmMwYTMyNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yZmYzZjgyM2IwYmM0YmI4ODkxYjM3MjY2ZmIzMmI5OCA9ICQoJzxkaXYgaWQ9Imh0bWxfMmZmM2Y4MjNiMGJjNGJiODg5MWIzNzI2NmZiMzJiOTgiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk92ZW4gJmFtcDsgRnJpZWQgQ2hpY2tlbjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZThmNWQzMTBjOWEyNGVkOGIzOTU1MTBmZWJjMGEzMjUuc2V0Q29udGVudChodG1sXzJmZjNmODIzYjBiYzRiYjg4OTFiMzcyNjZmYjMyYjk4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzVlZmUzMjg2NGJhYzQ5OTg4MWVhOTk5MTdhN2JmNjM3LmJpbmRQb3B1cChwb3B1cF9lOGY1ZDMxMGM5YTI0ZWQ4YjM5NTUxMGZlYmMwYTMyNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83YTdjY2RlZGQwNTU0ODg0YjFkNjUzNGEyYTBiYjVmNSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxMDc0NDI1OTY5MzIxNCwxMDMuODQ1NzQyNjA5ODE4MzkpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82NzkyOTE1MmZkYjQ0MmExOGNhMWIyNWI4NDEwMzgwMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lYzQ1MWMyMTcwMDM0MTZhYjExNzQ3NzM1NzJiYTM3MiA9ICQoJzxkaXYgaWQ9Imh0bWxfZWM0NTFjMjE3MDAzNDE2YWIxMTc0NzczNTcyYmEzNzIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlllbiBZYWtpbmlrdTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjc5MjkxNTJmZGI0NDJhMThjYTFiMjViODQxMDM4MDAuc2V0Q29udGVudChodG1sX2VjNDUxYzIxNzAwMzQxNmFiMTE3NDc3MzU3MmJhMzcyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzdhN2NjZGVkZDA1NTQ4ODRiMWQ2NTM0YTJhMGJiNWY1LmJpbmRQb3B1cChwb3B1cF82NzkyOTE1MmZkYjQ0MmExOGNhMWIyNWI4NDEwMzgwMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9hNjUyNDBlYWYwOGQ0Njk3OTIwYjQyODA2NzkyMmRmOSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc4ODI2LDEwMy44NDgzNTQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zMDBhNjBjODYwMjE0MjQ2YTg1OGUwNjFiMjk4NTg4MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xNDAyOGVjMTA2NjY0ZTlkYjE1Y2U4MGU5Y2QwODU4NSA9ICQoJzxkaXYgaWQ9Imh0bWxfMTQwMjhlYzEwNjY2NGU5ZGIxNWNlODBlOWNkMDg1ODUiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk15byBSZXN0b2JhcjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzAwYTYwYzg2MDIxNDI0NmE4NThlMDYxYjI5ODU4ODEuc2V0Q29udGVudChodG1sXzE0MDI4ZWMxMDY2NjRlOWRiMTVjZTgwZTljZDA4NTg1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2E2NTI0MGVhZjA4ZDQ2OTc5MjBiNDI4MDY3OTIyZGY5LmJpbmRQb3B1cChwb3B1cF8zMDBhNjBjODYwMjE0MjQ2YTg1OGUwNjFiMjk4NTg4MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85MGMwZTc5ZTFlOWU0NDBhYmMyMTU0YTgzMDdjZGNmMiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMTM3LDEwMy44NDcyNTYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wM2VjOTk3ZGJlMzY0NDI3ODM1YjdjNmM2NDUyNjlmZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85NmQ3Y2E1MDliOWE0OTc3YjM0MzBlYjJlNjU1YjE3MyA9ICQoJzxkaXYgaWQ9Imh0bWxfOTZkN2NhNTA5YjlhNDk3N2IzNDMwZWIyZTY1NWIxNzMiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlBhbnRsZXI8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzAzZWM5OTdkYmUzNjQ0Mjc4MzViN2M2YzY0NTI2OWZkLnNldENvbnRlbnQoaHRtbF85NmQ3Y2E1MDliOWE0OTc3YjM0MzBlYjJlNjU1YjE3Myk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85MGMwZTc5ZTFlOWU0NDBhYmMyMTU0YTgzMDdjZGNmMi5iaW5kUG9wdXAocG9wdXBfMDNlYzk5N2RiZTM2NDQyNzgzNWI3YzZjNjQ1MjY5ZmQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZWViNzZhOTU2YjEzNDEzZTg3M2IzMzk2NWIzZDE5YmUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDk4MiwxMDMuODQ4NDA0KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfY2UxZmU0NWNiMWJmNGMwYWIzMThhYmFkZDY1NzAyMTAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYzE1MTQyNWYzZTVmNGNlMjk0YTMyNDFkODg5OWViMjkgPSAkKCc8ZGl2IGlkPSJodG1sX2MxNTE0MjVmM2U1ZjRjZTI5NGEzMjQxZDg4OTllYjI5IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5CdXJsYW1hY2NvIFJpc3RvcmFudGU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2NlMWZlNDVjYjFiZjRjMGFiMzE4YWJhZGQ2NTcwMjEwLnNldENvbnRlbnQoaHRtbF9jMTUxNDI1ZjNlNWY0Y2UyOTRhMzI0MWQ4ODk5ZWIyOSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9lZWI3NmE5NTZiMTM0MTNlODczYjMzOTY1YjNkMTliZS5iaW5kUG9wdXAocG9wdXBfY2UxZmU0NWNiMWJmNGMwYWIzMThhYmFkZDY1NzAyMTApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNzAxZDY4M2JlNGExNGM2ZThiNDllNjY0NWYxMWI5MTIgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDExMDc5OTM0MzIwMywxMDMuODQ3NzYxNTA2NzU4NSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2U5N2FmYzg3YTFlYjRiZDQ4ZjA4MGUwNjZlOWI1ZDg0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzNhOGYyNTBhYjY5NjQ3MDRiNGY3OGUwNzFlN2Y0MTUzID0gJCgnPGRpdiBpZD0iaHRtbF8zYThmMjUwYWI2OTY0NzA0YjRmNzhlMDcxZTdmNDE1MyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U2h1S3V1IEl6YWtheWE8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2U5N2FmYzg3YTFlYjRiZDQ4ZjA4MGUwNjZlOWI1ZDg0LnNldENvbnRlbnQoaHRtbF8zYThmMjUwYWI2OTY0NzA0YjRmNzhlMDcxZTdmNDE1Myk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83MDFkNjgzYmU0YTE0YzZlOGI0OWU2NjQ1ZjExYjkxMi5iaW5kUG9wdXAocG9wdXBfZTk3YWZjODdhMWViNGJkNDhmMDgwZTA2NmU5YjVkODQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTQzMjU1ZTEyNDk1NDA1OWEwODNmMzI4NGQ2YmEzMzAgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3OTU5MjMsMTAzLjg0NjcpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80MzBjNjAxNDcyMGM0NDE5YTVhOGQwY2Y4ZmRiOWE3OCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yODZjMmViMmVlZTU0NTRmODJkY2Q5ZDQyNWRiYWU2YyA9ICQoJzxkaXYgaWQ9Imh0bWxfMjg2YzJlYjJlZWU1NDU0ZjgyZGNkOWQ0MjVkYmFlNmMiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkFtb3kgU3RyZWV0IEZvb2QgQ2VudHJlPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80MzBjNjAxNDcyMGM0NDE5YTVhOGQwY2Y4ZmRiOWE3OC5zZXRDb250ZW50KGh0bWxfMjg2YzJlYjJlZWU1NDU0ZjgyZGNkOWQ0MjVkYmFlNmMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTQzMjU1ZTEyNDk1NDA1OWEwODNmMzI4NGQ2YmEzMzAuYmluZFBvcHVwKHBvcHVwXzQzMGM2MDE0NzIwYzQ0MTlhNWE4ZDBjZjhmZGI5YTc4KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzdlYmFjMDkwMTFhYjQxNmNiYjgzZTA0OTMxZTdkMWU5ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzk0MDA2LDEwMy44NDY1OTYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wZmFhNTY3N2QyYzk0YzE3YmFkNDViNmU1ODIzYjE1YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9lZTljMjYwMGIwN2M0OWY4OWY5MmM0YjdhZWUzYTRhZCA9ICQoJzxkaXYgaWQ9Imh0bWxfZWU5YzI2MDBiMDdjNDlmODlmOTJjNGI3YWVlM2E0YWQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkhhbiBLZWUgRmlzaCBTb3VwPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wZmFhNTY3N2QyYzk0YzE3YmFkNDViNmU1ODIzYjE1Yi5zZXRDb250ZW50KGh0bWxfZWU5YzI2MDBiMDdjNDlmODlmOTJjNGI3YWVlM2E0YWQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfN2ViYWMwOTAxMWFiNDE2Y2JiODNlMDQ5MzFlN2QxZTkuYmluZFBvcHVwKHBvcHVwXzBmYWE1Njc3ZDJjOTRjMTdiYWQ0NWI2ZTU4MjNiMTViKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzA1NmU0MTg3MDQ2OTQ2YWJhOGUxMzc0M2M4Njk0OThhID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODEzNDUyMDMwOTM5ODEsMTAzLjg0NzU1MDkyMDY5ODEzKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMjQ4Y2QwOTU1NmYyNGM4YjlkYmZiM2ExMzdhM2U0ZDAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfN2JhNmUzNzNiZWY0NGE5NTk0OGQ2YjIyNjk1NmExOWQgPSAkKCc8ZGl2IGlkPSJodG1sXzdiYTZlMzczYmVmNDRhOTU5NDhkNmIyMjY5NTZhMTlkIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij7smZXrjIDrsJUgV2FuZyBEYWUgQmFrIEtvcmVhbiBCQlEgUmVzdGF1cmFudDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjQ4Y2QwOTU1NmYyNGM4YjlkYmZiM2ExMzdhM2U0ZDAuc2V0Q29udGVudChodG1sXzdiYTZlMzczYmVmNDRhOTU5NDhkNmIyMjY5NTZhMTlkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzA1NmU0MTg3MDQ2OTQ2YWJhOGUxMzc0M2M4Njk0OThhLmJpbmRQb3B1cChwb3B1cF8yNDhjZDA5NTU2ZjI0YzhiOWRiZmIzYTEzN2EzZTRkMCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80NjhiMTRlMTA4N2M0NzY3OWFmNjZiY2FkNjY4NDUzYiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMjA3MzQ1Mzc2ODcyLDEwMy44NDY4NjAwMDE5NzA5NyksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2FiZTNlZjRmN2M5ZDQyMjY4NDg4NmNkNGM1YzBhN2NlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzlkMGZjZTZiODA5ZTQ3Nzc5MDJiZDMyM2Q0N2I5YWY2ID0gJCgnPGRpdiBpZD0iaHRtbF85ZDBmY2U2YjgwOWU0Nzc3OTAyYmQzMjNkNDdiOWFmNiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+VGhlIFNwaWZmeSBEYXBwZXI8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2FiZTNlZjRmN2M5ZDQyMjY4NDg4NmNkNGM1YzBhN2NlLnNldENvbnRlbnQoaHRtbF85ZDBmY2U2YjgwOWU0Nzc3OTAyYmQzMjNkNDdiOWFmNik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80NjhiMTRlMTA4N2M0NzY3OWFmNjZiY2FkNjY4NDUzYi5iaW5kUG9wdXAocG9wdXBfYWJlM2VmNGY3YzlkNDIyNjg0ODg2Y2Q0YzVjMGE3Y2UpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfYzEyNDExMWIwYjQ4NDNmMTk5ZDY5YWEwNjdjZjk3NGUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MjQ1ODgyNzkzNTYxMjgsMTAzLjg0NzI0MDQ0MzE4Njk4KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjgxYmRhMzhmY2NiNDJmZmIwMDUyYWRkM2NkMDUzNTAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjRmYWZhYzkxYmEzNDIzNjk0ZjViNzZkOWEzMGE4MjggPSAkKCc8ZGl2IGlkPSJodG1sX2Y0ZmFmYWM5MWJhMzQyMzY5NGY1Yjc2ZDlhMzBhODI4IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MdWtlJiMzOTtzIE95c3RlciBCYXIgJmFtcDsgQ2hvcCBIb3VzZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjgxYmRhMzhmY2NiNDJmZmIwMDUyYWRkM2NkMDUzNTAuc2V0Q29udGVudChodG1sX2Y0ZmFmYWM5MWJhMzQyMzY5NGY1Yjc2ZDlhMzBhODI4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2MxMjQxMTFiMGI0ODQzZjE5OWQ2OWFhMDY3Y2Y5NzRlLmJpbmRQb3B1cChwb3B1cF9mODFiZGEzOGZjY2I0MmZmYjAwNTJhZGQzY2QwNTM1MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9hNGE0MmUyN2UxM2Q0OWY3YjMwNGJjNTEzYWE1OTY3MyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5MDcyMTMzMjgyMTEyNCwxMDMuODQ3MDI1NTY3NDk1MDQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81YWViMDczNTI0YmQ0NzIyOWIwMTYyNDliNTExNjRmNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wYTEzN2I1M2NhOGQ0MDlmYTkyZmFkY2Y0YjU3ZWZkYiA9ICQoJzxkaXYgaWQ9Imh0bWxfMGExMzdiNTNjYThkNDA5ZmE5MmZhZGNmNGI1N2VmZGIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk11Y2hhY2hvczwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNWFlYjA3MzUyNGJkNDcyMjliMDE2MjQ5YjUxMTY0ZjUuc2V0Q29udGVudChodG1sXzBhMTM3YjUzY2E4ZDQwOWZhOTJmYWRjZjRiNTdlZmRiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2E0YTQyZTI3ZTEzZDQ5ZjdiMzA0YmM1MTNhYTU5NjczLmJpbmRQb3B1cChwb3B1cF81YWViMDczNTI0YmQ0NzIyOWIwMTYyNDliNTExNjRmNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83NzNjMGRmZGU2NDk0YjYwYjA3N2UxMDMyZGI3MzJkMSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxMTk3NjI1ODg1NDE2NSwxMDMuODQ4NTA0MTAwNTg3MjkpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iZjMzMjhjY2JhZDc0OGU3ODc5NzcxOGJlZWY1YTViNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81MWQ1MjIyMGE4NDc0NGYyOGEyYmFmNWQ3NjAwNjI4MCA9ICQoJzxkaXYgaWQ9Imh0bWxfNTFkNTIyMjBhODQ3NDRmMjhhMmJhZjVkNzYwMDYyODAiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkNoZWVrIEJpc3RybzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYmYzMzI4Y2NiYWQ3NDhlNzg3OTc3MThiZWVmNWE1YjYuc2V0Q29udGVudChodG1sXzUxZDUyMjIwYTg0NzQ0ZjI4YTJiYWY1ZDc2MDA2MjgwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzc3M2MwZGZkZTY0OTRiNjBiMDc3ZTEwMzJkYjczMmQxLmJpbmRQb3B1cChwb3B1cF9iZjMzMjhjY2JhZDc0OGU3ODc5NzcxOGJlZWY1YTViNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl81MTU1MzMxNjNiNGE0OGM1OWM5NzY3OGE3YjRlMjMzMiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NDI4NDE3NzUzNDY3OCwxMDMuODQ3MjI1MzkzMDY0MjIpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jNTdiMmEyMjgxNGY0ZTVmYWMwNzM0Mzg3YzYxMjlhNiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iZjdlZGJmZjhiNWE0MTM3YjYxMDI3ZTVmZTIyMTVkMyA9ICQoJzxkaXYgaWQ9Imh0bWxfYmY3ZWRiZmY4YjVhNDEzN2I2MTAyN2U1ZmUyMjE1ZDMiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkdvb2QgRGF5IOWlveaXpTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzU3YjJhMjI4MTRmNGU1ZmFjMDczNDM4N2M2MTI5YTYuc2V0Q29udGVudChodG1sX2JmN2VkYmZmOGI1YTQxMzdiNjEwMjdlNWZlMjIxNWQzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzUxNTUzMzE2M2I0YTQ4YzU5Yzk3Njc4YTdiNGUyMzMyLmJpbmRQb3B1cChwb3B1cF9jNTdiMmEyMjgxNGY0ZTVmYWMwNzM0Mzg3YzYxMjlhNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80ZDU0Njc1N2ViZmY0OWI5YWU1NzEzNzE1MjBjNDUwNyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMTM5NTk3MDA4MDM5MSwxMDMuODQ2ODM0Mzg2OTcwNjYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kMjNiNzc1OGFlNTg0MTk4OTM3ZjFiYzY5Y2RlNjE5NCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84MjY0ZWU1ODBmMDM0YjIwYjc1ZjA5Y2FkY2FhYjJjNiA9ICQoJzxkaXYgaWQ9Imh0bWxfODI2NGVlNTgwZjAzNGIyMGI3NWYwOWNhZGNhYWIyYzYiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPldhbnRvbiBTZW5nJiMzOTtzIE5vb2RsZSBCYXI8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2QyM2I3NzU4YWU1ODQxOTg5MzdmMWJjNjljZGU2MTk0LnNldENvbnRlbnQoaHRtbF84MjY0ZWU1ODBmMDM0YjIwYjc1ZjA5Y2FkY2FhYjJjNik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80ZDU0Njc1N2ViZmY0OWI5YWU1NzEzNzE1MjBjNDUwNy5iaW5kUG9wdXAocG9wdXBfZDIzYjc3NThhZTU4NDE5ODkzN2YxYmM2OWNkZTYxOTQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMmNkNDNkMDkxNTg2NDkzMmE0NjJjYjU0MDczOWMzOGQgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3ODI3NDg2NDQ1MTIzMDMsMTAzLjg1MDc3MTk0MzA4OTA2KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOTEyOGVjOGYzZTI1NDA4MzhkNGNhNjJiNjhjMjIzZTkgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjIzY2I2Mzk4ZDNlNDY1ZmExZGE4MzVlOWY0ZWQ4YWEgPSAkKCc8ZGl2IGlkPSJodG1sX2YyM2NiNjM5OGQzZTQ2NWZhMWRhODM1ZTlmNGVkOGFhIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGUgV2VzdGluIFNpbmdhcG9yZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTEyOGVjOGYzZTI1NDA4MzhkNGNhNjJiNjhjMjIzZTkuc2V0Q29udGVudChodG1sX2YyM2NiNjM5OGQzZTQ2NWZhMWRhODM1ZTlmNGVkOGFhKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzJjZDQzZDA5MTU4NjQ5MzJhNDYyY2I1NDA3MzljMzhkLmJpbmRQb3B1cChwb3B1cF85MTI4ZWM4ZjNlMjU0MDgzOGQ0Y2E2MmI2OGMyMjNlOSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85NmY4ZjI5YzAxMTc0NjIzOGM5NDk2ZGMxOThmNDE0MyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxMDMzODUxOTQ1NTY3NSwxMDMuODQ1NzA3NTM3NTQ3MDcpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mZDVlNzg0YWY0ZTI0YjZmOGM1MmI4NDgxNDIyNjE5MCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yOGEzNGVmMWIyNTI0ODM0YWM4ZGJkYzZlMGMzYThhZiA9ICQoJzxkaXYgaWQ9Imh0bWxfMjhhMzRlZjFiMjUyNDgzNGFjOGRiZGM2ZTBjM2E4YWYiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkxvbGxhPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mZDVlNzg0YWY0ZTI0YjZmOGM1MmI4NDgxNDIyNjE5MC5zZXRDb250ZW50KGh0bWxfMjhhMzRlZjFiMjUyNDgzNGFjOGRiZGM2ZTBjM2E4YWYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfOTZmOGYyOWMwMTE3NDYyMzhjOTQ5NmRjMTk4ZjQxNDMuYmluZFBvcHVwKHBvcHVwX2ZkNWU3ODRhZjRlMjRiNmY4YzUyYjg0ODE0MjI2MTkwKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzc1NDI5MmU0NDYzZTRjOGU5NGEzNTRhZTUyOGJmYzgxID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzg2MzA4NDcwNDM3MTQ0LDEwMy44NTE0ODc0MTI3ODQxOCksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzYwZjAyOWJmNWU2NDRlNmM5MzM5ZmQzY2ZlN2IyOGQxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzE1OWMwZjdjNGZjNzRjNGQ4ZGI5ZDg2ZTIxMTZkNjIyID0gJCgnPGRpdiBpZD0iaHRtbF8xNTljMGY3YzRmYzc0YzRkOGRiOWQ4NmUyMTE2ZDYyMiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+UHVyZSBGaXRuZXNzPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82MGYwMjliZjVlNjQ0ZTZjOTMzOWZkM2NmZTdiMjhkMS5zZXRDb250ZW50KGh0bWxfMTU5YzBmN2M0ZmM3NGM0ZDhkYjlkODZlMjExNmQ2MjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNzU0MjkyZTQ0NjNlNGM4ZTk0YTM1NGFlNTI4YmZjODEuYmluZFBvcHVwKHBvcHVwXzYwZjAyOWJmNWU2NDRlNmM5MzM5ZmQzY2ZlN2IyOGQxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2U0OTYyN2YxMWEzMjQzYmQ5OWIyN2NkMzM0MDY1OTIxID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzgxNzA2MDY5MTQzMzUzLDEwMy44NDk0NTI0ODk2MDQ3OSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzNhZmExZGE3YTVmMDQ3YWZiNWU0ZWE3ZTRmNmI4NzQwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzUxM2ZmZDQ4YmVhMTQyNTRhZWVhZDg1OGQ4NWRhNzRiID0gJCgnPGRpdiBpZD0iaHRtbF81MTNmZmQ0OGJlYTE0MjU0YWVlYWQ4NThkODVkYTc0YiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+THVuYXIgQ29mZmVlIFJvYXN0ZXI8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzNhZmExZGE3YTVmMDQ3YWZiNWU0ZWE3ZTRmNmI4NzQwLnNldENvbnRlbnQoaHRtbF81MTNmZmQ0OGJlYTE0MjU0YWVlYWQ4NThkODVkYTc0Yik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9lNDk2MjdmMTFhMzI0M2JkOTliMjdjZDMzNDA2NTkyMS5iaW5kUG9wdXAocG9wdXBfM2FmYTFkYTdhNWYwNDdhZmI1ZTRlYTdlNGY2Yjg3NDApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNDk1YTE0ZTc1NzBkNGNkZmJlYTVhZGI4YTYwODkzMTEgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjM2MzE4NTA4MTkxNTMsMTAzLjg0ODI1MDc0OTY2NzY2KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfM2Q3NzFhYmZiM2VjNGI0Yjg1MDRjNjczNTIxOGY3ZDkgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjRkOTc5MjA0YWFjNGUyMjhlNWU2ZTdlOGI1ZTM5N2QgPSAkKCc8ZGl2IGlkPSJodG1sX2Y0ZDk3OTIwNGFhYzRlMjI4ZTVlNmU3ZThiNWUzOTdkIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5WZW51ZSBCeSBTZWJhc3RpYW48L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzNkNzcxYWJmYjNlYzRiNGI4NTA0YzY3MzUyMThmN2Q5LnNldENvbnRlbnQoaHRtbF9mNGQ5NzkyMDRhYWM0ZTIyOGU1ZTZlN2U4YjVlMzk3ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80OTVhMTRlNzU3MGQ0Y2RmYmVhNWFkYjhhNjA4OTMxMS5iaW5kUG9wdXAocG9wdXBfM2Q3NzFhYmZiM2VjNGI0Yjg1MDRjNjczNTIxOGY3ZDkpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTM2ZDhmNjcyOWJhNGRjYmE2MzFkMTg3NzBlZmEyMWMgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MTQ2OCwxMDMuODUwMDM5KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDY0MGNjODRiMTEzNGRkNDllOGZmYTNmNWJjMjQ3MzYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYWRjMTQzODllMGI5NDA5ZmIwYzI2MmY3MjExOTFmODMgPSAkKCc8ZGl2IGlkPSJodG1sX2FkYzE0Mzg5ZTBiOTQwOWZiMGMyNjJmNzIxMTkxZjgzIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5HcmFpbiBUcmFkZXJzPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kNjQwY2M4NGIxMTM0ZGQ0OWU4ZmZhM2Y1YmMyNDczNi5zZXRDb250ZW50KGh0bWxfYWRjMTQzODllMGI5NDA5ZmIwYzI2MmY3MjExOTFmODMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTM2ZDhmNjcyOWJhNGRjYmE2MzFkMTg3NzBlZmEyMWMuYmluZFBvcHVwKHBvcHVwX2Q2NDBjYzg0YjExMzRkZDQ5ZThmZmEzZjViYzI0NzM2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzRjYTVkYTdjMzdiMjQ2ZDc4OTM2OTIxNDYwYTQ2YmI3ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzYwNjcxLDEwMy44NDYxOSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzliMTRhMDBmYWNjMjQzN2M4NDE4ZjAxNDg3MzMzNmYzID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzIxYmI2MGQxZDkyNTQ1YTJhN2I2NjAyMDNmMTZjYjA2ID0gJCgnPGRpdiBpZD0iaHRtbF8yMWJiNjBkMWQ5MjU0NWEyYTdiNjYwMjAzZjE2Y2IwNiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QWxjaGVtaXN0PC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85YjE0YTAwZmFjYzI0MzdjODQxOGYwMTQ4NzMzMzZmMy5zZXRDb250ZW50KGh0bWxfMjFiYjYwZDFkOTI1NDVhMmE3YjY2MDIwM2YxNmNiMDYpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNGNhNWRhN2MzN2IyNDZkNzg5MzY5MjE0NjBhNDZiYjcuYmluZFBvcHVwKHBvcHVwXzliMTRhMDBmYWNjMjQzN2M4NDE4ZjAxNDg3MzMzNmYzKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzZjNzQ2NjRhN2FjNTQ1MzVhMmI5NmE3MTE0M2EyNmM3ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzc2MTkxNDgzNjc3ODI2LDEwMy44NDc5OTcyNzA0NzgwMyksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzcwNjhmYzFkYzJiYTQ4ZGViNmE0ZjBkYmIzYmY0MGRiID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2NhMjA5Y2VmMWI2YzRkMjNiNzRjZjc3NDUzZWRkYmFiID0gJCgnPGRpdiBpZD0iaHRtbF9jYTIwOWNlZjFiNmM0ZDIzYjc0Y2Y3NzQ1M2VkZGJhYiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U2FsYWRTdG9wITwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNzA2OGZjMWRjMmJhNDhkZWI2YTRmMGRiYjNiZjQwZGIuc2V0Q29udGVudChodG1sX2NhMjA5Y2VmMWI2YzRkMjNiNzRjZjc3NDUzZWRkYmFiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzZjNzQ2NjRhN2FjNTQ1MzVhMmI5NmE3MTE0M2EyNmM3LmJpbmRQb3B1cChwb3B1cF83MDY4ZmMxZGMyYmE0OGRlYjZhNGYwZGJiM2JmNDBkYik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8yMjRjODEzNTU0MGQ0MzIwOGFmZDFhNzJkNzZiZDVhYyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc4MDQ4ODgzNjMyNzk3MiwxMDMuODQ5Mzk5MTUxNTMzNzUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85MWQ3ZGExNjU1NTc0OWM5YmU1YTliZTYyYWIyMzk0NyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wNzEyYmFkYzE0NDY0NTkxODczZDFjMzU4YTVkNmQyZCA9ICQoJzxkaXYgaWQ9Imh0bWxfMDcxMmJhZGMxNDQ2NDU5MTg3M2QxYzM1OGE1ZDZkMmQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlRoZSBQcm92aWRvcmU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzkxZDdkYTE2NTU1NzQ5YzliZTVhOWJlNjJhYjIzOTQ3LnNldENvbnRlbnQoaHRtbF8wNzEyYmFkYzE0NDY0NTkxODczZDFjMzU4YTVkNmQyZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8yMjRjODEzNTU0MGQ0MzIwOGFmZDFhNzJkNzZiZDVhYy5iaW5kUG9wdXAocG9wdXBfOTFkN2RhMTY1NTU3NDljOWJlNWE5YmU2MmFiMjM5NDcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZWI5MmVlMGM0MGQ0NDA3YzhmNWMyZmU2OGJjZDlmYWIgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MTI0MDYzNzY2OTM4NjMsMTAzLjg0NzEwMDEyMDI3MjUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yNDE0ZjIwYmQwODk0ZDQ0YjhjZmRhNjYyYjZjMWU4OCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xNDY0ZmVjNzA4OWQ0NmZiYTBjMWFkNjRmZWE1NjQ4MiA9ICQoJzxkaXYgaWQ9Imh0bWxfMTQ2NGZlYzcwODlkNDZmYmEwYzFhZDY0ZmVhNTY0ODIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlRoZSBGbHlpbmcgU3F1aXJyZWw8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzI0MTRmMjBiZDA4OTRkNDRiOGNmZGE2NjJiNmMxZTg4LnNldENvbnRlbnQoaHRtbF8xNDY0ZmVjNzA4OWQ0NmZiYTBjMWFkNjRmZWE1NjQ4Mik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9lYjkyZWUwYzQwZDQ0MDdjOGY1YzJmZTY4YmNkOWZhYi5iaW5kUG9wdXAocG9wdXBfMjQxNGYyMGJkMDg5NGQ0NGI4Y2ZkYTY2MmI2YzFlODgpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTIzMzMxNGMwZTQ2NGYyODlhOWVmOTBiNDE0MmZlOTIgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDU4MTg5Nzg4NDcwNTIsMTAzLjg1MDQ0MDIwNTgwMjIzKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZGJhNjBmZWNmYTM4NDk0NDk5MTdlMDU5MDY5ODUwYzUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZjY2MzM0NTA5ZTBmNGM4ZWIxODA3NDg4NTA2M2Q4MWIgPSAkKCc8ZGl2IGlkPSJodG1sX2Y2NjMzNDUwOWUwZjRjOGViMTgwNzQ4ODUwNjNkODFiIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MYXUgUGEgU2F0IEZlc3RpdmFsIE1hcmtldDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZGJhNjBmZWNmYTM4NDk0NDk5MTdlMDU5MDY5ODUwYzUuc2V0Q29udGVudChodG1sX2Y2NjMzNDUwOWUwZjRjOGViMTgwNzQ4ODUwNjNkODFiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2UyMzMzMTRjMGU0NjRmMjg5YTllZjkwYjQxNDJmZTkyLmJpbmRQb3B1cChwb3B1cF9kYmE2MGZlY2ZhMzg0OTQ0OTkxN2UwNTkwNjk4NTBjNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kY2QyN2E0MDM2OWQ0M2Q0YjI3ZmUyMjA0NWQxMzcwOSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwODYwMzg1Mjc0OTkyMiwxMDMuODQ1Nzg3OTgxMzYwNjYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mZjA2ZmViNDYxMTc0NDNmOWEwNTQ0NTg5NjQ2MjVhNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80M2QzZjJhOTdiZDU0Yjk1YTM4Yjk1NGE4NDlhY2QwZSA9ICQoJzxkaXYgaWQ9Imh0bWxfNDNkM2YyYTk3YmQ1NGI5NWEzOGI5NTRhODQ5YWNkMGUiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkJsdWUgTGFiZWw8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2ZmMDZmZWI0NjExNzQ0M2Y5YTA1NDQ1ODk2NDYyNWE1LnNldENvbnRlbnQoaHRtbF80M2QzZjJhOTdiZDU0Yjk1YTM4Yjk1NGE4NDlhY2QwZSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kY2QyN2E0MDM2OWQ0M2Q0YjI3ZmUyMjA0NWQxMzcwOS5iaW5kUG9wdXAocG9wdXBfZmYwNmZlYjQ2MTE3NDQzZjlhMDU0NDU4OTY0NjI1YTUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfYjkwODZiOTZiZDJhNDkzODkxNTlmZjNkNTQxZDQ2ZTggPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDcwNjk2NjczNzE2NTMsMTAzLjg0NTQzMTE2NDUyNTQ2KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzg4N2Y4NjI4NjM4NGQyOGJhZjY4NzJhOTlmZjY3YjIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGE5NGFlYzQwNDAwNDgxZjg4YzY4OWUyZDgzYTRhOWYgPSAkKCc8ZGl2IGlkPSJodG1sX2RhOTRhZWM0MDQwMDQ4MWY4OGM2ODllMmQ4M2E0YTlmIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGUgU2NhcmxldDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYzg4N2Y4NjI4NjM4NGQyOGJhZjY4NzJhOTlmZjY3YjIuc2V0Q29udGVudChodG1sX2RhOTRhZWM0MDQwMDQ4MWY4OGM2ODllMmQ4M2E0YTlmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2I5MDg2Yjk2YmQyYTQ5Mzg5MTU5ZmYzZDU0MWQ0NmU4LmJpbmRQb3B1cChwb3B1cF9jODg3Zjg2Mjg2Mzg0ZDI4YmFmNjg3MmE5OWZmNjdiMik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8yZDNkYjU0YWM2N2E0ZTdkOWI5MzBiMWIwNzA4NjE4NiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NTQzMzYzNjM4NjI3LDEwMy44NDgwMzMyNDkzNzgxOSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzQ5YTE2NDdlMTE0OTQ3ZWFhOTZhZDc0ZjViNjRkMzQ5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2IyN2I0NTU2MzdlNjRhZDQ4ZjQ4YmI3MjU2ZWZkYjlmID0gJCgnPGRpdiBpZD0iaHRtbF9iMjdiNDU1NjM3ZTY0YWQ0OGY0OGJiNzI1NmVmZGI5ZiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+Nm96IEVzcHJlc3NvIEJhcjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDlhMTY0N2UxMTQ5NDdlYWE5NmFkNzRmNWI2NGQzNDkuc2V0Q29udGVudChodG1sX2IyN2I0NTU2MzdlNjRhZDQ4ZjQ4YmI3MjU2ZWZkYjlmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzJkM2RiNTRhYzY3YTRlN2Q5YjkzMGIxYjA3MDg2MTg2LmJpbmRQb3B1cChwb3B1cF80OWExNjQ3ZTExNDk0N2VhYTk2YWQ3NGY1YjY0ZDM0OSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kODg2YzcwNGI4MmE0YWQyYjYzZGZiMDQ4MzM4NTkzOSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxNTcwNDQxMjU5ODY4NSwxMDMuODQ4MTQyMjcyNzA4NjYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jMGZmZTYwNTU4MzA0ODQxYjhjYWEyY2U4NGJjNjhjMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iZjA4ZjY5MzA4YjQ0NTc1YjNjMjkzZDNmMGJhZjY3YSA9ICQoJzxkaXYgaWQ9Imh0bWxfYmYwOGY2OTMwOGI0NDU3NWIzYzI5M2QzZjBiYWY2N2EiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlBsYWluIFZhbmlsbGE8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2MwZmZlNjA1NTgzMDQ4NDFiOGNhYTJjZTg0YmM2OGMxLnNldENvbnRlbnQoaHRtbF9iZjA4ZjY5MzA4YjQ0NTc1YjNjMjkzZDNmMGJhZjY3YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9kODg2YzcwNGI4MmE0YWQyYjYzZGZiMDQ4MzM4NTkzOS5iaW5kUG9wdXAocG9wdXBfYzBmZmU2MDU1ODMwNDg0MWI4Y2FhMmNlODRiYzY4YzEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfM2Y3NjEzZmJiNTFlNGVmNTk2YTBhYmNhOGZmMDI1NzQgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MjA0OTkyMTYxNjY4NiwxMDMuODQ3NzY5NjE0MzEwNTEpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80OGRhYTQ5ZDZhNDk0YmVkOGVkNzU0YzgyY2U5MTdiNyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8xMzFjMjM5MDkzMzM0ZjE0ODQ5OWUyN2Q3Y2MxYjY5MiA9ICQoJzxkaXYgaWQ9Imh0bWxfMTMxYzIzOTA5MzMzNGYxNDg0OTllMjdkN2NjMWI2OTIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkVtcGxveWVlcyBPbmx5IFNpbmdhcG9yZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNDhkYWE0OWQ2YTQ5NGJlZDhlZDc1NGM4MmNlOTE3Yjcuc2V0Q29udGVudChodG1sXzEzMWMyMzkwOTMzMzRmMTQ4NDk5ZTI3ZDdjYzFiNjkyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzNmNzYxM2ZiYjUxZTRlZjU5NmEwYWJjYThmZjAyNTc0LmJpbmRQb3B1cChwb3B1cF80OGRhYTQ5ZDZhNDk0YmVkOGVkNzU0YzgyY2U5MTdiNyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8zZmU1NGJjNGJkMzc0YTljYTM0NmE2ODQ0ZGQwOWJmMyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc3MDcsMTAzLjg0NTc5KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMThiMjI3MWJmMTBjNGM0Yjg2ZWIxM2FhNjExZDQxNjQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNTJlZDllYzQ1ODE1NDU5MDhiMmMzZGJmMWE5ODFiMTcgPSAkKCc8ZGl2IGlkPSJodG1sXzUyZWQ5ZWM0NTgxNTQ1OTA4YjJjM2RiZjFhOTgxYjE3IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5JcHB1ZG8gKOS4gOmiqOWggik8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzE4YjIyNzFiZjEwYzRjNGI4NmViMTNhYTYxMWQ0MTY0LnNldENvbnRlbnQoaHRtbF81MmVkOWVjNDU4MTU0NTkwOGIyYzNkYmYxYTk4MWIxNyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8zZmU1NGJjNGJkMzc0YTljYTM0NmE2ODQ0ZGQwOWJmMy5iaW5kUG9wdXAocG9wdXBfMThiMjI3MWJmMTBjNGM0Yjg2ZWIxM2FhNjExZDQxNjQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfODU0YjhiNDk2NWY5NDliMmFiNDc2NDQ1ZTFkZjQxNWMgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NzgxMDUwMDE4MjEyNSwxMDMuODUwOTY1NTY1NjU2MjQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iNmIwNzk4MGRlOTQ0NzRjYjkxY2Y2ZWZmYWFhM2QzZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wMmEyNmM3YTE1NGQ0YWVhYjlmZTNhN2FhOGI4ZWM0YiA9ICQoJzxkaXYgaWQ9Imh0bWxfMDJhMjZjN2ExNTRkNGFlYWI5ZmUzYTdhYThiOGVjNGIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkxvYmJ5IExvdW5nZSBXZXN0aW48L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2I2YjA3OTgwZGU5NDQ3NGNiOTFjZjZlZmZhYWEzZDNkLnNldENvbnRlbnQoaHRtbF8wMmEyNmM3YTE1NGQ0YWVhYjlmZTNhN2FhOGI4ZWM0Yik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl84NTRiOGI0OTY1Zjk0OWIyYWI0NzY0NDVlMWRmNDE1Yy5iaW5kUG9wdXAocG9wdXBfYjZiMDc5ODBkZTk0NDc0Y2I5MWNmNmVmZmFhYTNkM2QpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfOTdjZDgwNzA2MTg0NDFkY2JiMWJmZGNhMTQyNjcxNTQgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MjExNTQ2MjE4MzgxODQsMTAzLjg0NzcwODcwMjA4NzM5KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMmRjZjQ0Mzk2MmEwNDgwYzg4YWMzNGEzOTUxN2RkYWIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzhkYjk3MTI1Y2Q4NDI5MWJkOWZjM2JlOTc3MGU0ODIgPSAkKCc8ZGl2IGlkPSJodG1sXzM4ZGI5NzEyNWNkODQyOTFiZDlmYzNiZTk3NzBlNDgyIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5Cb2NoaW5jaGU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzJkY2Y0NDM5NjJhMDQ4MGM4OGFjMzRhMzk1MTdkZGFiLnNldENvbnRlbnQoaHRtbF8zOGRiOTcxMjVjZDg0MjkxYmQ5ZmMzYmU5NzcwZTQ4Mik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85N2NkODA3MDYxODQ0MWRjYmIxYmZkY2ExNDI2NzE1NC5iaW5kUG9wdXAocG9wdXBfMmRjZjQ0Mzk2MmEwNDgwYzg4YWMzNGEzOTUxN2RkYWIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNzM4ODNjYjQ5NDdmNGQ5OGJlY2QzZTBkNWNlYTdkZTYgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NzgwMDgzOTg2Mjg0MjQsMTAzLjg0NTIwMTU5MTQwMDEpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8xODE3MWYwYzhlZDI0ODQ2YjY0YzMwZmJmZWQwY2FiMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80NTQyNzUyMmRmZWE0MGM2YTQ0N2MyZTcwZDE3ZmY1YSA9ICQoJzxkaXYgaWQ9Imh0bWxfNDU0Mjc1MjJkZmVhNDBjNmE0NDdjMmU3MGQxN2ZmNWEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkZhdCBQcmluY2U8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzE4MTcxZjBjOGVkMjQ4NDZiNjRjMzBmYmZlZDBjYWIwLnNldENvbnRlbnQoaHRtbF80NTQyNzUyMmRmZWE0MGM2YTQ0N2MyZTcwZDE3ZmY1YSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83Mzg4M2NiNDk0N2Y0ZDk4YmVjZDNlMGQ1Y2VhN2RlNi5iaW5kUG9wdXAocG9wdXBfMTgxNzFmMGM4ZWQyNDg0NmI2NGMzMGZiZmVkMGNhYjApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZmYyZDc5NzM2NjE2NDJlNDkyMWU3YWZkNmFiMGJiYTYgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDk3OTk2NzUxMzc3MzYsMTAzLjg0NzczNDEwODU0MzE4KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNDg1MTI5NGJkYzY5NGQ2YWIxNDhmNmZlZDk5NjY1Y2QgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZWYzMDQ1MjRhZTY3NDM0MWFmZjc2YTc4MjY3OTMwZDEgPSAkKCc8ZGl2IGlkPSJodG1sX2VmMzA0NTI0YWU2NzQzNDFhZmY3NmE3ODI2NzkzMGQxIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGlhbiBIb2NrIEtlbmcgKFRlbXBsZSkgKFRoaWFuIEhvY2sgS2VuZyk8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzQ4NTEyOTRiZGM2OTRkNmFiMTQ4ZjZmZWQ5OTY2NWNkLnNldENvbnRlbnQoaHRtbF9lZjMwNDUyNGFlNjc0MzQxYWZmNzZhNzgyNjc5MzBkMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9mZjJkNzk3MzY2MTY0MmU0OTIxZTdhZmQ2YWIwYmJhNi5iaW5kUG9wdXAocG9wdXBfNDg1MTI5NGJkYzY5NGQ2YWIxNDhmNmZlZDk5NjY1Y2QpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZjA2YmJhZDUyOGU1NDZhYmE0ZTMyZWJkNTFhMDQ2ZDggPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MDMzOTQxMDk2NTU0NjgsMTAzLjg0Nzg4ODEyNjc4NDgpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yNjVhMTQ5OTgzZmI0NzQxODAzZDg0NTdjODgxMjI4OSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83ODk5ZmViYTQ2NzU0YzZlOWE2NDljMDQyMDg0MDkxYSA9ICQoJzxkaXYgaWQ9Imh0bWxfNzg5OWZlYmE0Njc1NGM2ZTlhNjQ5YzA0MjA4NDA5MWEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkNvbW1vbiBNYW4gU3RhbjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjY1YTE0OTk4M2ZiNDc0MTgwM2Q4NDU3Yzg4MTIyODkuc2V0Q29udGVudChodG1sXzc4OTlmZWJhNDY3NTRjNmU5YTY0OWMwNDIwODQwOTFhKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2YwNmJiYWQ1MjhlNTQ2YWJhNGUzMmViZDUxYTA0NmQ4LmJpbmRQb3B1cChwb3B1cF8yNjVhMTQ5OTgzZmI0NzQxODAzZDg0NTdjODgxMjI4OSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80Mzk0OGE0N2NkODg0YTYyODFjMDg5OGY4Zjg4ZDhmMiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxNTA0OTQyMzcwOTU4MSwxMDMuODQ1NDkwMjI4MzMwMTgpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84YzdmMzE4OTIxZmE0MTlmODRmZWFhZWJlYzE0NTA3NyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zMzYwYzdmMjhiOGM0MTYxOWNiYTg1NzI5YjcyMzlkNyA9ICQoJzxkaXYgaWQ9Imh0bWxfMzM2MGM3ZjI4YjhjNDE2MTljYmE4NTcyOWI3MjM5ZDciIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkFubiBTaWFuZyBIaWxsPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF84YzdmMzE4OTIxZmE0MTlmODRmZWFhZWJlYzE0NTA3Ny5zZXRDb250ZW50KGh0bWxfMzM2MGM3ZjI4YjhjNDE2MTljYmE4NTcyOWI3MjM5ZDcpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNDM5NDhhNDdjZDg4NGE2MjgxYzA4OThmOGY4OGQ4ZjIuYmluZFBvcHVwKHBvcHVwXzhjN2YzMTg5MjFmYTQxOWY4NGZlYWFlYmVjMTQ1MDc3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzUzNDAzMjI2MDNiYTRjOWI5MzcxOTEwMjc2MjJkMTYzID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODA4MywxMDMuODQ1NzYzKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDFlYmE0OTAwZmI3NGQ4MGI2MmE0MjU3NGQxODdhY2QgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGM0OTcwYzQ0OWEyNDU5ZDkxNWMyZGU3YTFjNTkwMmQgPSAkKCc8ZGl2IGlkPSJodG1sX2RjNDk3MGM0NDlhMjQ1OWQ5MTVjMmRlN2ExYzU5MDJkIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGUgT3RoZXIgUm9vZjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDFlYmE0OTAwZmI3NGQ4MGI2MmE0MjU3NGQxODdhY2Quc2V0Q29udGVudChodG1sX2RjNDk3MGM0NDlhMjQ1OWQ5MTVjMmRlN2ExYzU5MDJkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzUzNDAzMjI2MDNiYTRjOWI5MzcxOTEwMjc2MjJkMTYzLmJpbmRQb3B1cChwb3B1cF9kMWViYTQ5MDBmYjc0ZDgwYjYyYTQyNTc0ZDE4N2FjZCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85OGFlMGY1YjFmMDE0NmRmODQ0NDVlNWZhYjczMzQ5ZSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwNTM1NTg2NzM0NTkwNywxMDMuODQ2OTAyNjQwMzg5MjIpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lOTEyMTAwN2ExNGY0NzgzODk1MTIwMzMyNDhjNWQ3MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wNzEzNzBmOGMwMGQ0MjY1OGU2MTE3ZDMwYjU3NzRjMSA9ICQoJzxkaXYgaWQ9Imh0bWxfMDcxMzcwZjhjMDBkNDI2NThlNjExN2QzMGI1Nzc0YzEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkh5YW5nIFllb24gKO2WpeyXsCk8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2U5MTIxMDA3YTE0ZjQ3ODM4OTUxMjAzMzI0OGM1ZDcxLnNldENvbnRlbnQoaHRtbF8wNzEzNzBmOGMwMGQ0MjY1OGU2MTE3ZDMwYjU3NzRjMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85OGFlMGY1YjFmMDE0NmRmODQ0NDVlNWZhYjczMzQ5ZS5iaW5kUG9wdXAocG9wdXBfZTkxMjEwMDdhMTRmNDc4Mzg5NTEyMDMzMjQ4YzVkNzEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTBkYzUxOWZjYTc4NGEzYmExYjIwMjQyZGY4YjM3NTAgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MTg3OCwxMDMuODQ4MTY5KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTY4M2Q5Nzg3ZWRiNGExNThiMzk3YTkwMDM2ZWE5YTkgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODI4ZDQxZGY0ZjgxNDdmMGI3OTc1NDljZmYxNDg4OWEgPSAkKCc8ZGl2IGlkPSJodG1sXzgyOGQ0MWRmNGY4MTQ3ZjBiNzk3NTQ5Y2ZmMTQ4ODlhIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5TaGFrZSBGYXJtPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81NjgzZDk3ODdlZGI0YTE1OGIzOTdhOTAwMzZlYTlhOS5zZXRDb250ZW50KGh0bWxfODI4ZDQxZGY0ZjgxNDdmMGI3OTc1NDljZmYxNDg4OWEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZTBkYzUxOWZjYTc4NGEzYmExYjIwMjQyZGY4YjM3NTAuYmluZFBvcHVwKHBvcHVwXzU2ODNkOTc4N2VkYjRhMTU4YjM5N2E5MDAzNmVhOWE5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzljNDk1YzdmMGM0YTQ5MWJiMzk4MjQxMWQ2ZmZiZjM1ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzY4MzM4MTg0NTY5ODkyLDEwMy44NDU0MTQzNDE3MTYxNSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2QxOTAwMzNjMTBjNTRjMjlhZmQ0YWU2M2I0NGViOWJhID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzdlNTg0MjM4YWFhYjQwZWFhYTVjZjUzYmNhMzRlMjMzID0gJCgnPGRpdiBpZD0iaHRtbF83ZTU4NDIzOGFhYWI0MGVhYWE1Y2Y1M2JjYTM0ZTIzMyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U29maXRlbCBTaW5nYXBvcmUgQ2l0eSBDZW50cmU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2QxOTAwMzNjMTBjNTRjMjlhZmQ0YWU2M2I0NGViOWJhLnNldENvbnRlbnQoaHRtbF83ZTU4NDIzOGFhYWI0MGVhYWE1Y2Y1M2JjYTM0ZTIzMyk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl85YzQ5NWM3ZjBjNGE0OTFiYjM5ODI0MTFkNmZmYmYzNS5iaW5kUG9wdXAocG9wdXBfZDE5MDAzM2MxMGM1NGMyOWFmZDRhZTYzYjQ0ZWI5YmEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMTZjNjRkN2E3MTU0NDljY2EwNjkwMmNiN2Y4NTBhNGUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MzExODMyMjYwOTM3OTQsMTAzLjg0ODUzODU1OTQyMjgpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85NTQzODU0YzIyOGI0MDU0Yjc1NTJiMzE5OTY4OTg5ZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80MDNkY2JmOGQ3MWY0MmUzYjlhMmQyMjJjODZjNmJjZiA9ICQoJzxkaXYgaWQ9Imh0bWxfNDAzZGNiZjhkNzFmNDJlM2I5YTJkMjIyYzg2YzZiY2YiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkFtb3kgSG90ZWw8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzk1NDM4NTRjMjI4YjQwNTRiNzU1MmIzMTk5Njg5ODlkLnNldENvbnRlbnQoaHRtbF80MDNkY2JmOGQ3MWY0MmUzYjlhMmQyMjJjODZjNmJjZik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xNmM2NGQ3YTcxNTQ0OWNjYTA2OTAyY2I3Zjg1MGE0ZS5iaW5kUG9wdXAocG9wdXBfOTU0Mzg1NGMyMjhiNDA1NGI3NTUyYjMxOTk2ODk4OWQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfODk3MTk0ODhmNGNmNDgyYjlhZmVlYmZhZjFkYzM1ZmIgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3ODk1ODQsMTAzLjg0NDE4KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZWEzMDU1NmIwOTQ0NDE0N2E3MjRiZGZhMDU2NmVlNGIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZWZjMTdlMTI3OTY1NGYyZTgzZWY0YmE0MDZmNTQ0OTMgPSAkKCc8ZGl2IGlkPSJodG1sX2VmYzE3ZTEyNzk2NTRmMmU4M2VmNGJhNDA2ZjU0NDkzIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5KdW5pb3I8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2VhMzA1NTZiMDk0NDQxNDdhNzI0YmRmYTA1NjZlZTRiLnNldENvbnRlbnQoaHRtbF9lZmMxN2UxMjc5NjU0ZjJlODNlZjRiYTQwNmY1NDQ5Myk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl84OTcxOTQ4OGY0Y2Y0ODJiOWFmZWViZmFmMWRjMzVmYi5iaW5kUG9wdXAocG9wdXBfZWEzMDU1NmIwOTQ0NDE0N2E3MjRiZGZhMDU2NmVlNGIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNGQ5ODEwZmIwNDg3NGU1MTg5YTA5MjU3ZjYzNGYyNDQgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjkzNzMzODQ5NTY1NjYsMTAzLjg0NjgxNjY4ODg0MjY1KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZjcyNTRlMTQ2M2I5NGFiMTliNWM3NTdlOTJkYWU4OWEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZTlkNDVhZjM2NDY0NGQzNTk4NDdmODIwYTlhYjNmMTEgPSAkKCc8ZGl2IGlkPSJodG1sX2U5ZDQ1YWYzNjQ2NDRkMzU5ODQ3ZjgyMGE5YWIzZjExIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5QdXJhIEJyYXNhPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mNzI1NGUxNDYzYjk0YWIxOWI1Yzc1N2U5MmRhZTg5YS5zZXRDb250ZW50KGh0bWxfZTlkNDVhZjM2NDY0NGQzNTk4NDdmODIwYTlhYjNmMTEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNGQ5ODEwZmIwNDg3NGU1MTg5YTA5MjU3ZjYzNGYyNDQuYmluZFBvcHVwKHBvcHVwX2Y3MjU0ZTE0NjNiOTRhYjE5YjVjNzU3ZTkyZGFlODlhKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2YyMWM3NzYyYzRiZTQyNzViYzdjZDAyNGEyMTA1YzE5ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzkxMDAyOTM1MzE3MTI4LDEwMy44NDcwOTQwNDUyMDE5MSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2E0YTkzNjg5OWUyYjQyYzA5MWFjNWRmZjc2NGZhODA2ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2Y5YTUzZTRlMWJhYjRiNjJiNTE3NmE5ZTFlMWY4MDdiID0gJCgnPGRpdiBpZD0iaHRtbF9mOWE1M2U0ZTFiYWI0YjYyYjUxNzZhOWUxZTFmODA3YiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U0FQIFRoYWkgRm9vZDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTRhOTM2ODk5ZTJiNDJjMDkxYWM1ZGZmNzY0ZmE4MDYuc2V0Q29udGVudChodG1sX2Y5YTUzZTRlMWJhYjRiNjJiNTE3NmE5ZTFlMWY4MDdiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2YyMWM3NzYyYzRiZTQyNzViYzdjZDAyNGEyMTA1YzE5LmJpbmRQb3B1cChwb3B1cF9hNGE5MzY4OTllMmI0MmMwOTFhYzVkZmY3NjRmYTgwNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8zNTc0NDI3ZjY5MDQ0Y2M3YmZkYTAzNWU1MWVkY2Y2NSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMjQ1OTA4NTgwOTY2NSwxMDMuODQ0ODUwMzM5MzE4MTEpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82MTYxZGQ3OTU4NmU0ZmU4ODE4ZTVmZTM5Yjc5YjQ0MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zMjlmNzFiZGRmZGU0MTZhODk0ZmQwNjFmMzkxOGNjNCA9ICQoJzxkaXYgaWQ9Imh0bWxfMzI5ZjcxYmRkZmRlNDE2YTg5NGZkMDYxZjM5MThjYzQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPjNyZCBDdWx0dXJlIEJyZXdpbmcgQ28uPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82MTYxZGQ3OTU4NmU0ZmU4ODE4ZTVmZTM5Yjc5YjQ0MS5zZXRDb250ZW50KGh0bWxfMzI5ZjcxYmRkZmRlNDE2YTg5NGZkMDYxZjM5MThjYzQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMzU3NDQyN2Y2OTA0NGNjN2JmZGEwMzVlNTFlZGNmNjUuYmluZFBvcHVwKHBvcHVwXzYxNjFkZDc5NTg2ZTRmZTg4MThlNWZlMzliNzliNDQxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2NhYmU2YjBmNGYzNTQ3NjViMzkxOTUxZTQwYWFlOTkwID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODEzMjkzNDI3ODgyMzgyLDEwMy44NDQ2MDUzMjEzMTExNSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzIyNTA0MDRjNWMwMzRjZDQ4ZTNiYTkxZWUxOWM1YTgxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzBlZDg3N2M0YTcxNDQwMGFiZjE5NjM4YTI5YjEzYmIzID0gJCgnPGRpdiBpZD0iaHRtbF8wZWQ4NzdjNGE3MTQ0MDBhYmYxOTYzOGEyOWIxM2JiMyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QnVkZGhhIFRvb3RoIFJlbGljIFRlbXBsZSAmYW1wOyBNdXNldW0gKOaWsOWKoOWdoeS9m+eJmeWvuum+meWNjumZoikgKEJ1ZGRoYSBUb290aCBSZWxpYyBUZW1wbGUgJmFtcDsgTXVzZXVtKTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMjI1MDQwNGM1YzAzNGNkNDhlM2JhOTFlZTE5YzVhODEuc2V0Q29udGVudChodG1sXzBlZDg3N2M0YTcxNDQwMGFiZjE5NjM4YTI5YjEzYmIzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2NhYmU2YjBmNGYzNTQ3NjViMzkxOTUxZTQwYWFlOTkwLmJpbmRQb3B1cChwb3B1cF8yMjUwNDA0YzVjMDM0Y2Q0OGUzYmE5MWVlMTljNWE4MSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83MmQyMjI4MzVjNTc0ZTljOGRhZTY4ZWFlZTQ4ZTE4NiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc4MTgxMDIzNTA5MDc3LDEwMy44NDg0NjU4Mjk0OTM3NSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzkxMDNlOTA0MzVhMDQ0NDdhZmFkODc1OGRjZGY5N2ZiID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2NhN2UzMGQ1ZTZjZjQwMWQ4MTA1NDIwZjYyNzMzYjFjID0gJCgnPGRpdiBpZD0iaHRtbF9jYTdlMzBkNWU2Y2Y0MDFkODEwNTQyMGY2MjczM2IxYyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+UGxhaW4gVmFuaWxsYTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTEwM2U5MDQzNWEwNDQ0N2FmYWQ4NzU4ZGNkZjk3ZmIuc2V0Q29udGVudChodG1sX2NhN2UzMGQ1ZTZjZjQwMWQ4MTA1NDIwZjYyNzMzYjFjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzcyZDIyMjgzNWM1NzRlOWM4ZGFlNjhlYWVlNDhlMTg2LmJpbmRQb3B1cChwb3B1cF85MTAzZTkwNDM1YTA0NDQ3YWZhZDg3NThkY2RmOTdmYik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xNTQyYmNmZmJjNzg0Nzg3OWEzYjdlNjFlYWZhOGFkMyA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc4MDU3MjMxNTEzMDI1MiwxMDMuODUxMDc2ODUzOTc4OSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzc4OWI2Mjk2YWNmYzQzOThiOGE4YjdlZGNlMTEwNTQwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2U0MWM1MTgyMjg2NTRiM2U5ZWJhM2NiZWRhNDYwNjkxID0gJCgnPGRpdiBpZD0iaHRtbF9lNDFjNTE4MjI4NjU0YjNlOWViYTNjYmVkYTQ2MDY5MSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+V2VzdGluIEluZmluaXR5IFBvb2w8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc4OWI2Mjk2YWNmYzQzOThiOGE4YjdlZGNlMTEwNTQwLnNldENvbnRlbnQoaHRtbF9lNDFjNTE4MjI4NjU0YjNlOWViYTNjYmVkYTQ2MDY5MSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xNTQyYmNmZmJjNzg0Nzg3OWEzYjdlNjFlYWZhOGFkMy5iaW5kUG9wdXAocG9wdXBfNzg5YjYyOTZhY2ZjNDM5OGI4YThiN2VkY2UxMTA1NDApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjUxMjA1Mjk5ZDIyNDZlMmFjOWQ0MzU2YjE4YjBkNzAgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3OTA5NzIwNzk0MjMyNywxMDMuODUwMzU0MzU2MDg1NzkpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8yZTBiZTA3ODgxZDc0MzBiOWJkZDEzODUxNTBhMzRmNyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9kNGFkOWRjNDIzNmM0YmZjODkyMDdjYTYzMzVlZTlhYiA9ICQoJzxkaXYgaWQ9Imh0bWxfZDRhZDlkYzQyMzZjNGJmYzg5MjA3Y2E2MzM1ZWU5YWIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkpld2VsIENvZmZlZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMmUwYmUwNzg4MWQ3NDMwYjliZGQxMzg1MTUwYTM0Zjcuc2V0Q29udGVudChodG1sX2Q0YWQ5ZGM0MjM2YzRiZmM4OTIwN2NhNjMzNWVlOWFiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzY1MTIwNTI5OWQyMjQ2ZTJhYzlkNDM1NmIxOGIwZDcwLmJpbmRQb3B1cChwb3B1cF8yZTBiZTA3ODgxZDc0MzBiOWJkZDEzODUxNTBhMzRmNyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl83MGRjNGMwZTg0YzU0Y2FkYTk0YjRhODdlNWE0MjM0OCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgyOTc3MTkxMTA4MzMzOSwxMDMuODQ5MDY4MDUwODk2MDQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lNTkyMWNkNmMxMWU0ZjEzYmVkOWY4YTkzMThjZTRiOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9hMTEzNDY0MzBjNTU0NDE3YjZjMTBmZWZmZWFjZjdhMiA9ICQoJzxkaXYgaWQ9Imh0bWxfYTExMzQ2NDMwYzU1NDQxN2I2YzEwZmVmZmVhY2Y3YTIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkZhdCBTYWlnb24gQm95PC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNTkyMWNkNmMxMWU0ZjEzYmVkOWY4YTkzMThjZTRiOS5zZXRDb250ZW50KGh0bWxfYTExMzQ2NDMwYzU1NDQxN2I2YzEwZmVmZmVhY2Y3YTIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNzBkYzRjMGU4NGM1NGNhZGE5NGI0YTg3ZTVhNDIzNDguYmluZFBvcHVwKHBvcHVwX2U1OTIxY2Q2YzExZTRmMTNiZWQ5ZjhhOTMxOGNlNGI5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2Y3OGUxMWY4NGE4NTQ1OGVhNThkOTU5ZTMzNjM5ZjY4ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODE4MTIzMjgyOTM5NDA0LDEwMy44NDg5MzM3Njg5MTUzNyksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2UyM2YzZDBhZjhkOTQyZjg5YTVkYmQ2ZTcyYjkwZGZlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2NiODRmMTk5NTliZDRlZGZhMTUwOTBmOGVmZGEzMzVkID0gJCgnPGRpdiBpZD0iaHRtbF9jYjg0ZjE5OTU5YmQ0ZWRmYTE1MDkwZjhlZmRhMzM1ZCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+TWFya2V0IFN0cmVldCBJbnRlcmltIEhhd2tlciBDZW50cmU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2UyM2YzZDBhZjhkOTQyZjg5YTVkYmQ2ZTcyYjkwZGZlLnNldENvbnRlbnQoaHRtbF9jYjg0ZjE5OTU5YmQ0ZWRmYTE1MDkwZjhlZmRhMzM1ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9mNzhlMTFmODRhODU0NThlYTU4ZDk1OWUzMzYzOWY2OC5iaW5kUG9wdXAocG9wdXBfZTIzZjNkMGFmOGQ5NDJmODlhNWRiZDZlNzJiOTBkZmUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfYzlmNmM0ZWNkY2M3NDRhN2FhMjU5NTFlYmRhYmY2OTggPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjQ1MTgxNDI0MDYxOSwxMDMuODQ4NDYyNjc3NzA4OSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzZlZTM5MzY2YTk2NzRlYThhN2UyODZlMzg4NzRiNTQ4ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzRiNjQxYjRiZDJhODQzODVhZTIxMzIxNmQ0ODk5MDNjID0gJCgnPGRpdiBpZD0iaHRtbF80YjY0MWI0YmQyYTg0Mzg1YWUyMTMyMTZkNDg5OTAzYyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+RG93bnRvd24gR2FsbGVyeTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNmVlMzkzNjZhOTY3NGVhOGE3ZTI4NmUzODg3NGI1NDguc2V0Q29udGVudChodG1sXzRiNjQxYjRiZDJhODQzODVhZTIxMzIxNmQ0ODk5MDNjKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2M5ZjZjNGVjZGNjNzQ0YTdhYTI1OTUxZWJkYWJmNjk4LmJpbmRQb3B1cChwb3B1cF82ZWUzOTM2NmE5Njc0ZWE4YTdlMjg2ZTM4ODc0YjU0OCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9hNjE3ZWFjODI3ZTA0ZmMxOTJjYzNlYmJlNjMwZGUzZiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgyOTAwNjQ5NzYzNTgyNCwxMDMuODQ4MTE2Mzk3ODU3NjcpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85Y2Q2Y2YwYzNlZTI0Y2U0YTQ0ZmYzNDkyNDMyODU3MiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9iNGI2YzFhNDUwYWQ0NGE3OTYwNTA1NTdlZTlmNGE2ZCA9ICQoJzxkaXYgaWQ9Imh0bWxfYjRiNmMxYTQ1MGFkNDRhNzk2MDUwNTU3ZWU5ZjRhNmQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPldhbmcgRGFlIEJhayBLb3JlYW4gQkJRPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85Y2Q2Y2YwYzNlZTI0Y2U0YTQ0ZmYzNDkyNDMyODU3Mi5zZXRDb250ZW50KGh0bWxfYjRiNmMxYTQ1MGFkNDRhNzk2MDUwNTU3ZWU5ZjRhNmQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfYTYxN2VhYzgyN2UwNGZjMTkyY2MzZWJiZTYzMGRlM2YuYmluZFBvcHVwKHBvcHVwXzljZDZjZjBjM2VlMjRjZTRhNDRmZjM0OTI0MzI4NTcyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzQ5ZDhlZTkyMjNiZjRhOWY4Y2E1Yjc5MDRjZTBjMTk3ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzk1MDMsMTAzLjg0NjczNCksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzBlMWI0M2Y2ODIwYjQ5ZGI4NTA2YWUyZjBmNDAyNzU2ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2M4Nzc1OWJhODYzNTRlMzQ4MWRkZTVmYzM0M2I4NDcyID0gJCgnPGRpdiBpZD0iaHRtbF9jODc3NTliYTg2MzU0ZTM0ODFkZGU1ZmMzNDNiODQ3MiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+SjIgQ3Jpc3B5IEN1cnJ5IFB1ZmZzPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wZTFiNDNmNjgyMGI0OWRiODUwNmFlMmYwZjQwMjc1Ni5zZXRDb250ZW50KGh0bWxfYzg3NzU5YmE4NjM1NGUzNDgxZGRlNWZjMzQzYjg0NzIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNDlkOGVlOTIyM2JmNGE5ZjhjYTViNzkwNGNlMGMxOTcuYmluZFBvcHVwKHBvcHVwXzBlMWI0M2Y2ODIwYjQ5ZGI4NTA2YWUyZjBmNDAyNzU2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2Y0MmMwMGM0OTRhNjRjNDBiZTUxNGUxYTM4M2M5ZWU0ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzc2OTM1ODExNzIwMzY1LDEwMy44NDQzOTAwMjY4OTUwNCksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzk0ZWFhM2E0YTM3MTRjZDBhZjg1ZjY4NGUzN2Q5NDA1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzg5NTU5NDczNGM4YjRmZWQ5ZmY3ZWE3MzMxOGY3ZmYyID0gJCgnPGRpdiBpZD0iaHRtbF84OTU1OTQ3MzRjOGI0ZmVkOWZmN2VhNzMzMThmN2ZmMiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QmFyaXN0YXJ0IENvZmZlZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOTRlYWEzYTRhMzcxNGNkMGFmODVmNjg0ZTM3ZDk0MDUuc2V0Q29udGVudChodG1sXzg5NTU5NDczNGM4YjRmZWQ5ZmY3ZWE3MzMxOGY3ZmYyKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2Y0MmMwMGM0OTRhNjRjNDBiZTUxNGUxYTM4M2M5ZWU0LmJpbmRQb3B1cChwb3B1cF85NGVhYTNhNGEzNzE0Y2QwYWY4NWY2ODRlMzdkOTQwNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8zY2ZmNDZjNDVlMjM0OGYyODMyMWEzNjQ2ZDAwODYyNiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgwMjkxMzgxNDQ0NTA2LDEwMy44NDQ3NDE5MzAzMTYwOSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2NlZDJlM2E5OWIwZTQzMTI5ZDlmZThiZjM5NmZkN2U1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzY5ZmM4MDA1NmM3YjRkYTBhM2VkYWQ3ZTI1NGM2Yzk1ID0gJCgnPGRpdiBpZD0iaHRtbF82OWZjODAwNTZjN2I0ZGEwYTNlZGFkN2UyNTRjNmM5NSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+TWF4d2VsbCBGb29kIENlbnRyZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfY2VkMmUzYTk5YjBlNDMxMjlkOWZlOGJmMzk2ZmQ3ZTUuc2V0Q29udGVudChodG1sXzY5ZmM4MDA1NmM3YjRkYTBhM2VkYWQ3ZTI1NGM2Yzk1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzNjZmY0NmM0NWUyMzQ4ZjI4MzIxYTM2NDZkMDA4NjI2LmJpbmRQb3B1cChwb3B1cF9jZWQyZTNhOTliMGU0MzEyOWQ5ZmU4YmYzOTZmZDdlNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xZGE1YTM3ZjI2YmM0NjExODdkYjkyYTg4MmNjYjc0YSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc3OTc3ODA2MzgyNDIxOSwxMDMuODQ0NDI3NTU3MTQ3MjcpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82MWI3ZTUyMTdjMmM0ZDM4YjAxNzliMTJlM2E3MTUzMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84YmQwZDZlMzMyNTM0YjQwYTVlMDVhZTkzYzU4YjFiMiA9ICQoJzxkaXYgaWQ9Imh0bWxfOGJkMGQ2ZTMzMjUzNGI0MGE1ZTA1YWU5M2M1OGIxYjIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk5lc3V0byBQYXRpc3NlcmllPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82MWI3ZTUyMTdjMmM0ZDM4YjAxNzliMTJlM2E3MTUzMS5zZXRDb250ZW50KGh0bWxfOGJkMGQ2ZTMzMjUzNGI0MGE1ZTA1YWU5M2M1OGIxYjIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMWRhNWEzN2YyNmJjNDYxMTg3ZGI5MmE4ODJjY2I3NGEuYmluZFBvcHVwKHBvcHVwXzYxYjdlNTIxN2MyYzRkMzhiMDE3OWIxMmUzYTcxNTMxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzYxYmFmN2EyN2FiYjQwMjY5NzlhNzVmMzNjNzkyMmJlID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODI3NDI0Nzc5NzEyODEsMTAzLjg0NzA4ODk3NDQzNzk3KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYzk0Y2RiZjgyYzg0NGYxOTg5NWE5NzljYzM3OWJlYjUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZGI2Zjg0MjQ3ZWQ2NGU3OWIxMTRiN2MzZmE0YmFjZjIgPSAkKCc8ZGl2IGlkPSJodG1sX2RiNmY4NDI0N2VkNjRlNzliMTE0YjdjM2ZhNGJhY2YyIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5NZXJjaSBNYXJjZWwgQ2x1YiBTdHJlZXQ8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2M5NGNkYmY4MmM4NDRmMTk4OTVhOTc5Y2MzNzliZWI1LnNldENvbnRlbnQoaHRtbF9kYjZmODQyNDdlZDY0ZTc5YjExNGI3YzNmYTRiYWNmMik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82MWJhZjdhMjdhYmI0MDI2OTc5YTc1ZjMzYzc5MjJiZS5iaW5kUG9wdXAocG9wdXBfYzk0Y2RiZjgyYzg0NGYxOTg5NWE5NzljYzM3OWJlYjUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjhlYjZmMmJlMjZiNDRkNGI0ZDZiODk2YTljMzI0ZDMgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MTk2NDA5MDY5ODA2MzgsMTAzLjg1MDM4NDk0Mjc2MjA1KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTRlZjAyMjRiM2U2NDA5OTk3MDlmOWIzNTVkMzQyZmIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMDZkYTkzOTUyZDQ0NGRjNDg2OTU0NzM1YTliZWJjMDkgPSAkKCc8ZGl2IGlkPSJodG1sXzA2ZGE5Mzk1MmQ0NDRkYzQ4Njk1NDczNWE5YmViYzA5IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5BcnRlbWlzIEdyaWxsPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81NGVmMDIyNGIzZTY0MDk5OTcwOWY5YjM1NWQzNDJmYi5zZXRDb250ZW50KGh0bWxfMDZkYTkzOTUyZDQ0NGRjNDg2OTU0NzM1YTliZWJjMDkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjhlYjZmMmJlMjZiNDRkNGI0ZDZiODk2YTljMzI0ZDMuYmluZFBvcHVwKHBvcHVwXzU0ZWYwMjI0YjNlNjQwOTk5NzA5ZjliMzU1ZDM0MmZiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzRhYzdhNWM5MTI3NjQ0YmZhYTc2MWIyMzQ5YTFhNTY5ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzY5ODY4NzYyNjEyNDY2LDEwMy44NDUzNTE0NzQyMTkwNiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzY2ZDczNWU5NmFkNTRkNWU4ZDAxYzcyNzhhMzRiNjZmID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzVkODkwYTlhMjhlNTQzY2NiMmUzNzEyMGUwMjNhNjI1ID0gJCgnPGRpdiBpZD0iaHRtbF81ZDg5MGE5YTI4ZTU0M2NjYjJlMzcxMjBlMDIzYTYyNSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+SGVucmkgQ2hhcnBlbnRpZXI8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzY2ZDczNWU5NmFkNTRkNWU4ZDAxYzcyNzhhMzRiNjZmLnNldENvbnRlbnQoaHRtbF81ZDg5MGE5YTI4ZTU0M2NjYjJlMzcxMjBlMDIzYTYyNSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl80YWM3YTVjOTEyNzY0NGJmYWE3NjFiMjM0OWExYTU2OS5iaW5kUG9wdXAocG9wdXBfNjZkNzM1ZTk2YWQ1NGQ1ZThkMDFjNzI3OGEzNGI2NmYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjQ3NGJkYTdiYmQ2NDBkMTllMmU5OWU2YmM1NDgzMTQgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjcyNjU2MjExNzE3NzUsMTAzLjg0NTI2MTI4MTg0MDYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8wZjExZGNkMmVkYWY0MzE4YjRmNTc3NzViNGNkMWY0YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wNmQ5YjdlMGRkNmU0NDY0YWQyNDUxMGMwNjY4OTExMSA9ICQoJzxkaXYgaWQ9Imh0bWxfMDZkOWI3ZTBkZDZlNDQ2NGFkMjQ1MTBjMDY2ODkxMTEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlRoZSBEYWlseSBDdXQ8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBmMTFkY2QyZWRhZjQzMThiNGY1Nzc3NWI0Y2QxZjRiLnNldENvbnRlbnQoaHRtbF8wNmQ5YjdlMGRkNmU0NDY0YWQyNDUxMGMwNjY4OTExMSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82NDc0YmRhN2JiZDY0MGQxOWUyZTk5ZTZiYzU0ODMxNC5iaW5kUG9wdXAocG9wdXBfMGYxMWRjZDJlZGFmNDMxOGI0ZjU3Nzc1YjRjZDFmNGIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZjEyYzA5YTlmNDA0NDdmYWJkYzI3ZDU1ZmMxOTQ5NDUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NzkzMTM2OTU2MDYyMjUsMTAzLjg0NjEzNDc1NDA5NTE2KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOWNhNzA3ZmNhYmJlNGNlZDlhODdmOGU0MGIwYjkwZjUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMGVkN2NmMDUxOTQwNGQ4ODllYzZjOTNjOTk2Y2Q0YzQgPSAkKCc8ZGl2IGlkPSJodG1sXzBlZDdjZjA1MTk0MDRkODg5ZWM2YzkzYzk5NmNkNGM0IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5PdHRvIFJpc3RvcmFudGUgSXRhbGlhbm88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzljYTcwN2ZjYWJiZTRjZWQ5YTg3ZjhlNDBiMGI5MGY1LnNldENvbnRlbnQoaHRtbF8wZWQ3Y2YwNTE5NDA0ZDg4OWVjNmM5M2M5OTZjZDRjNCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9mMTJjMDlhOWY0MDQ0N2ZhYmRjMjdkNTVmYzE5NDk0NS5iaW5kUG9wdXAocG9wdXBfOWNhNzA3ZmNhYmJlNGNlZDlhODdmOGU0MGIwYjkwZjUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMjFiZTIzYjk3Y2RjNGY1ZDg4ZTNjNTM1NjM0NzA3NzggPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjYwNTMzNTM3NzU5MSwxMDMuODQ1ODIzMDg1Mzg4NTMpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lMjUxM2I3N2U3MTk0ZjBmYTllYzMzOWIyZDA0MzBiOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84OTBiMGZmZDUxNmU0YTg5OTc4M2U0MGVkMDNhZmQ3NSA9ICQoJzxkaXYgaWQ9Imh0bWxfODkwYjBmZmQ1MTZlNGE4OTk3ODNlNDBlZDAzYWZkNzUiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkltYWthdHN1PC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lMjUxM2I3N2U3MTk0ZjBmYTllYzMzOWIyZDA0MzBiOS5zZXRDb250ZW50KGh0bWxfODkwYjBmZmQ1MTZlNGE4OTk3ODNlNDBlZDAzYWZkNzUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMjFiZTIzYjk3Y2RjNGY1ZDg4ZTNjNTM1NjM0NzA3NzguYmluZFBvcHVwKHBvcHVwX2UyNTEzYjc3ZTcxOTRmMGZhOWVjMzM5YjJkMDQzMGI5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2M2NTVmMTVhNmQ2ODRmNWVhZDg0MTNiYTNiYzk1NDEyID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzk0MDYyMjM1MTI4MTQsMTAzLjg1MTcyNzk0NjU2OTk3KSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMTk2OTYyZjA3ODg2NDkxZjk1NDlmMDVhZTY5NmE1NTAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMWE3YzliNWVkZmEwNDJjZDhjNjA2NzU0ZjFkYmM0NWIgPSAkKCc8ZGl2IGlkPSJodG1sXzFhN2M5YjVlZGZhMDQyY2Q4YzYwNjc1NGYxZGJjNDViIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5JbXBlcmlhbCBUcmVhc3VyZSBTdXBlciBQZWtpbmcgRHVjayBSZXN0YXVyYW50IOW+oeWvtuiHs+WwiueDpOm0qOW6lzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMTk2OTYyZjA3ODg2NDkxZjk1NDlmMDVhZTY5NmE1NTAuc2V0Q29udGVudChodG1sXzFhN2M5YjVlZGZhMDQyY2Q4YzYwNjc1NGYxZGJjNDViKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2M2NTVmMTVhNmQ2ODRmNWVhZDg0MTNiYTNiYzk1NDEyLmJpbmRQb3B1cChwb3B1cF8xOTY5NjJmMDc4ODY0OTFmOTU0OWYwNWFlNjk2YTU1MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9lNzcxZjUyOTc4MDE0NzJlYTBmMDkwOGU3NTE0MDI4NSA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjgxMTk2MTQ2MzQ2MDgwNiwxMDMuODUwNTAyMzkwNjg1NTMpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lNTcxYWVlYzEzNWE0OGQyYTkzZjNhMmM2OWI1ODk4YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wNzY4ZDUwYTdhZDE0MDVlODE1ODUzMDdmMDViMjM5ZCA9ICQoJzxkaXYgaWQ9Imh0bWxfMDc2OGQ1MGE3YWQxNDA1ZTgxNTg1MzA3ZjA1YjIzOWQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkFsY2hlbWlzdDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZTU3MWFlZWMxMzVhNDhkMmE5M2YzYTJjNjliNTg5OGIuc2V0Q29udGVudChodG1sXzA3NjhkNTBhN2FkMTQwNWU4MTU4NTMwN2YwNWIyMzlkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2U3NzFmNTI5NzgwMTQ3MmVhMGYwOTA4ZTc1MTQwMjg1LmJpbmRQb3B1cChwb3B1cF9lNTcxYWVlYzEzNWE0OGQyYTkzZjNhMmM2OWI1ODk4Yik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9lZGQzYTRhOWRlN2Y0ZWZjYWZjYjc3NjM3NmM3ZjU4ZCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NDE5Nzg5NDQ3Nzg0LDEwMy44NDM4NDgyNTkyNTg0MiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzg5N2Q3MDA1NmUwODRkNDI4NTI1ZjM0MDc3ZWQ4YjA4ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzk0OTY2YWNjMTE3ZjQ2NWVhY2M5ODI4NzFhNmU0YjQ0ID0gJCgnPGRpdiBpZD0iaHRtbF85NDk2NmFjYzExN2Y0NjVlYWNjOTgyODcxYTZlNGI0NCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+VGlwcGxpbmcgQ2x1YjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfODk3ZDcwMDU2ZTA4NGQ0Mjg1MjVmMzQwNzdlZDhiMDguc2V0Q29udGVudChodG1sXzk0OTY2YWNjMTE3ZjQ2NWVhY2M5ODI4NzFhNmU0YjQ0KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2VkZDNhNGE5ZGU3ZjRlZmNhZmNiNzc2Mzc2YzdmNThkLmJpbmRQb3B1cChwb3B1cF84OTdkNzAwNTZlMDg0ZDQyODUyNWYzNDA3N2VkOGIwOCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8yNmM1MzNmZDc1MGI0NjU4YjhhMmY4ZWQzYzhkN2Y2OCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NTI3Njg1MjQyMjk5NCwxMDMuODQ1MjA1ODQ3OTMxODUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81MDNhNjEwZjRiZTM0YjhlYWIyODNiZjEyMzFlNmFhNSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jYzcyNDY3YWI4MWI0NWMwOGJkMWI2N2YwZGQ1OTJlMCA9ICQoJzxkaXYgaWQ9Imh0bWxfY2M3MjQ2N2FiODFiNDVjMDhiZDFiNjdmMGRkNTkyZTAiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlNpbmdhcG9yZSBDaXR5IEdhbGxlcnk8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzUwM2E2MTBmNGJlMzRiOGVhYjI4M2JmMTIzMWU2YWE1LnNldENvbnRlbnQoaHRtbF9jYzcyNDY3YWI4MWI0NWMwOGJkMWI2N2YwZGQ1OTJlMCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8yNmM1MzNmZDc1MGI0NjU4YjhhMmY4ZWQzYzhkN2Y2OC5iaW5kUG9wdXAocG9wdXBfNTAzYTYxMGY0YmUzNGI4ZWFiMjgzYmYxMjMxZTZhYTUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfMTBkZWM3ZWE2YzJkNDk4YWFlYmNlYmJmYmQ3ODRlZGIgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NzU2NDIwNDg5NjEzMDksMTAzLjg0NzA1NzkzNDMxMDkxKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMGFkZDVmMWMwMTc3NDgwYWE3ZThhNTY5YTRkMzg4OTcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYzk5YzMzMjc5M2IyNDdhZmJkNzkzMDMxZTcxNzg2MjkgPSAkKCc8ZGl2IGlkPSJodG1sX2M5OWMzMzI3OTNiMjQ3YWZiZDc5MzAzMWU3MTc4NjI5IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5TdGFyYnVja3M8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBhZGQ1ZjFjMDE3NzQ4MGFhN2U4YTU2OWE0ZDM4ODk3LnNldENvbnRlbnQoaHRtbF9jOTljMzMyNzkzYjI0N2FmYmQ3OTMwMzFlNzE3ODYyOSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl8xMGRlYzdlYTZjMmQ0OThhYWViY2ViYmZiZDc4NGVkYi5iaW5kUG9wdXAocG9wdXBfMGFkZDVmMWMwMTc3NDgwYWE3ZThhNTY5YTRkMzg4OTcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjk0NzcyZGM2Yzc5NDcyNzk0OGQ1Y2YxMzQ2MWNiZDUgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI3NjY5ODk1MzU5NDgxMDMsMTAzLjg0NTk1MDkxNjMyMTUpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iNTQ0MGZhZjY1NjI0MDgyYTE1Y2FjYmFjOTEwMGNkYyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8yNzgwMjc2N2I5NGE0YzhhYjA5N2NiNDVlNzZiOWJiZSA9ICQoJzxkaXYgaWQ9Imh0bWxfMjc4MDI3NjdiOTRhNGM4YWIwOTdjYjQ1ZTc2YjliYmUiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkt1cm8gTWFndXJvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9iNTQ0MGZhZjY1NjI0MDgyYTE1Y2FjYmFjOTEwMGNkYy5zZXRDb250ZW50KGh0bWxfMjc4MDI3NjdiOTRhNGM4YWIwOTdjYjQ1ZTc2YjliYmUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfNjk0NzcyZGM2Yzc5NDcyNzk0OGQ1Y2YxMzQ2MWNiZDUuYmluZFBvcHVwKHBvcHVwX2I1NDQwZmFmNjU2MjQwODJhMTVjYWNiYWM5MTAwY2RjKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzVjYzg1ZmU1ZDdhZTQ5YzhiN2M0MmQ2ZDEwYjgzZTg1ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzgzOTI3NjAwODI0NDI1LDEwMy44NDQ0MjY0NTA0OTIxNiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2UxZGQxZDQ1NjA4ZjQxNzg5YmQ1MmY2MmY4OGFhNjAxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2FmNjMxZGZiNGViOTRlOTk4MGRiZjUxNzQwMDJkMWMzID0gJCgnPGRpdiBpZD0iaHRtbF9hZjYzMWRmYjRlYjk0ZTk5ODBkYmY1MTc0MDAyZDFjMyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QmFtISBUYXBhcy1TYWtlIEJhcjwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZTFkZDFkNDU2MDhmNDE3ODliZDUyZjYyZjg4YWE2MDEuc2V0Q29udGVudChodG1sX2FmNjMxZGZiNGViOTRlOTk4MGRiZjUxNzQwMDJkMWMzKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzVjYzg1ZmU1ZDdhZTQ5YzhiN2M0MmQ2ZDEwYjgzZTg1LmJpbmRQb3B1cChwb3B1cF9lMWRkMWQ0NTYwOGY0MTc4OWJkNTJmNjJmODhhYTYwMSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9mN2E5NmZhZjhlZTE0NjFlYTE2ZTFiMTBiNjllZDBmMCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc4MzM5NzAyOTE5NTMxNiwxMDMuODUxNTEzMzU4Njg1OSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2E1YjkxZmE4YjNiZjQ1MDU5MWFlZDY5ZmEwOTJmYjAwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzFjNzBkYjY4MGY1MTQxY2NiNzdmMDI5M2VmODZiYzdmID0gJCgnPGRpdiBpZD0iaHRtbF8xYzcwZGI2ODBmNTE0MWNjYjc3ZjAyOTNlZjg2YmM3ZiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QXNpYSBTcXVhcmU8L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2E1YjkxZmE4YjNiZjQ1MDU5MWFlZDY5ZmEwOTJmYjAwLnNldENvbnRlbnQoaHRtbF8xYzcwZGI2ODBmNTE0MWNjYjc3ZjAyOTNlZjg2YmM3Zik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9mN2E5NmZhZjhlZTE0NjFlYTE2ZTFiMTBiNjllZDBmMC5iaW5kUG9wdXAocG9wdXBfYTViOTFmYThiM2JmNDUwNTkxYWVkNjlmYTA5MmZiMDApOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfY2VlOTZkNjlkNjVlNDA2OTliMGRkNjRlNTZhZDNlN2EgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4MjQ5NDQzODI5MzY0OSwxMDMuODQ3MjE2MzE0NzA5MjQpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9jYmE3YWYwOTgxMjg0ZDViYWY4ZDgyODJlMzcwMDM1MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zYTYyYzkyOTg5YmQ0ODZhOTcxN2NlZDc5ZTc5YTM3YiA9ICQoJzxkaXYgaWQ9Imh0bWxfM2E2MmM5Mjk4OWJkNDg2YTk3MTdjZWQ3OWU3OWEzN2IiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkJhci1hLXRoeW08L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2NiYTdhZjA5ODEyODRkNWJhZjhkODI4MmUzNzAwMzUxLnNldENvbnRlbnQoaHRtbF8zYTYyYzkyOTg5YmQ0ODZhOTcxN2NlZDc5ZTc5YTM3Yik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9jZWU5NmQ2OWQ2NWU0MDY5OWIwZGQ2NGU1NmFkM2U3YS5iaW5kUG9wdXAocG9wdXBfY2JhN2FmMDk4MTI4NGQ1YmFmOGQ4MjgyZTM3MDAzNTEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZWM1YTQzNjM1Y2JiNGE1N2I0YTZjMGMyYWQ4NTNlMWMgPSBuZXcgTC5SZWd1bGFyUG9seWdvbk1hcmtlcigKICAgICAgICAgICAgICAgIG5ldyBMLkxhdExuZygxLjI4Mjg1OTg0Mjc2OTE3ODYsMTAzLjg0NjQwNjUxMDc0MDIxKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZGRkNDg5MWIxNGZmNDE0MjhkZWFkMDE1OGYyMTBiZDUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNDE4NjQ3ZWY2Nzc1NDJjOGI4YjhkNzJiZjBjNzg1NmYgPSAkKCc8ZGl2IGlkPSJodG1sXzQxODY0N2VmNjc3NTQyYzhiOGI4ZDcyYmYwYzc4NTZmIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MZSBCb24gRnVuazwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZGRkNDg5MWIxNGZmNDE0MjhkZWFkMDE1OGYyMTBiZDUuc2V0Q29udGVudChodG1sXzQxODY0N2VmNjc3NTQyYzhiOGI4ZDcyYmYwYzc4NTZmKTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2VjNWE0MzYzNWNiYjRhNTdiNGE2YzBjMmFkODUzZTFjLmJpbmRQb3B1cChwb3B1cF9kZGQ0ODkxYjE0ZmY0MTQyOGRlYWQwMTU4ZjIxMGJkNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl84ZGM5YTM4MmFmOWM0NWRkYmFiNGQ0OWE4Yjk3NzI5NiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc2ODg2MSwxMDMuODQ1MjYpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF84YTcxMzgyMzVlZWM0ZWRjODFjOTY1MDZhNzIyYjdmYyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zYjg0ZTI5OWRlNGI0ZTE4ODQ3ZjUyMzgzNmZiMDg1ZCA9ICQoJzxkaXYgaWQ9Imh0bWxfM2I4NGUyOTlkZTRiNGUxODg0N2Y1MjM4MzZmYjA4NWQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkd1em1hbiB5IEdvbWV6PC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF84YTcxMzgyMzVlZWM0ZWRjODFjOTY1MDZhNzIyYjdmYy5zZXRDb250ZW50KGh0bWxfM2I4NGUyOTlkZTRiNGUxODg0N2Y1MjM4MzZmYjA4NWQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfOGRjOWEzODJhZjljNDVkZGJhYjRkNDlhOGI5NzcyOTYuYmluZFBvcHVwKHBvcHVwXzhhNzEzODIzNWVlYzRlZGM4MWM5NjUwNmE3MjJiN2ZjKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzhmYWMyNmJkYTRjYjQ5ZGM4YTY2MWQzYmUyM2NjNzhiID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODMwNzE4NDMwNjg0MTM4LDEwMy44NDg3NDM4Mjg5NjkwOCksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2RiNWEwMTEzZmE0NTQ1NzA4ZmM4OGU4MTgyYmNkNzE0ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2U1MDJiODBlNmQxMjQ1MTFiZTFlODEyZGYyNGYzZmFiID0gJCgnPGRpdiBpZD0iaHRtbF9lNTAyYjgwZTZkMTI0NTExYmUxZTgxMmRmMjRmM2ZhYiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+SmluIEZpbmUgRGluaW5nPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kYjVhMDExM2ZhNDU0NTcwOGZjODhlODE4MmJjZDcxNC5zZXRDb250ZW50KGh0bWxfZTUwMmI4MGU2ZDEyNDUxMWJlMWU4MTJkZjI0ZjNmYWIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfOGZhYzI2YmRhNGNiNDlkYzhhNjYxZDNiZTIzY2M3OGIuYmluZFBvcHVwKHBvcHVwX2RiNWEwMTEzZmE0NTQ1NzA4ZmM4OGU4MTgyYmNkNzE0KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzdiNTFiMDFjNDZkMjQyMTI4NjA2NDhmMWI0Y2E5OThmID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yODE3ODA5MTg5NjE5Mjg3LDEwMy44NDU3MTU5MTUzMzMyKSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpY29uIDogbmV3IEwuSWNvbi5EZWZhdWx0KCksCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdibHVlJywKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMGYwZjBmJywKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC43LAogICAgICAgICAgICAgICAgICAgIG51bWJlck9mU2lkZXM6IDQsCiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsCiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIC5hZGRUbyhtYXBfMzZmMTFiY2FiMjI5NGEwNGJkOTM4ZmRjZjdhZWJlNTMpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMTcwN2M4Yzc3MjAyNDUxNWFhM2YyY2JjOGMxN2UyMTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNDNiYjE0OTUzNTViNDA1ZGFmNjUzM2ZlYjAxNDYzOWIgPSAkKCc8ZGl2IGlkPSJodG1sXzQzYmIxNDk1MzU1YjQwNWRhZjY1MzNmZWIwMTQ2MzliIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MJiMzOTtBbmdlbHVzPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8xNzA3YzhjNzcyMDI0NTE1YWEzZjJjYmM4YzE3ZTIxMi5zZXRDb250ZW50KGh0bWxfNDNiYjE0OTUzNTViNDA1ZGFmNjUzM2ZlYjAxNDYzOWIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfN2I1MWIwMWM0NmQyNDIxMjg2MDY0OGYxYjRjYTk5OGYuYmluZFBvcHVwKHBvcHVwXzE3MDdjOGM3NzIwMjQ1MTVhYTNmMmNiYzhjMTdlMjEyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyX2ZiMGRlODczYWVjYTRiNzM5Y2Q3MTY3MjVmMWUyZjlkID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzc3NDU0MDM4NzQ5NzQzLDEwMy44NTA5OTMxMjAxMDkwMiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2M4MDQ0ZGZhZTM0ZTQ2MDQ5M2I3NTBiOTNhNDI5OGI5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzRjZWFhODYzZTFlMjQ4MGU4YTdlMjg2ODBhOTgwMGEwID0gJCgnPGRpdiBpZD0iaHRtbF80Y2VhYTg2M2UxZTI0ODBlOGE3ZTI4NjgwYTk4MDBhMCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+UHVyZSBZb2dhPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9jODA0NGRmYWUzNGU0NjA0OTNiNzUwYjkzYTQyOThiOS5zZXRDb250ZW50KGh0bWxfNGNlYWE4NjNlMWUyNDgwZThhN2UyODY4MGE5ODAwYTApOwogICAgICAgICAgICAKCiAgICAgICAgICAgIHJlZ3VsYXJfcG9seWdvbl9tYXJrZXJfZmIwZGU4NzNhZWNhNGI3MzljZDcxNjcyNWYxZTJmOWQuYmluZFBvcHVwKHBvcHVwX2M4MDQ0ZGZhZTM0ZTQ2MDQ5M2I3NTBiOTNhNDI5OGI5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciByZWd1bGFyX3BvbHlnb25fbWFya2VyXzhhNjU3NGNhMTdiMDRiNDI5NDZjMjg4ODRhMWIwYTc3ID0gbmV3IEwuUmVndWxhclBvbHlnb25NYXJrZXIoCiAgICAgICAgICAgICAgICBuZXcgTC5MYXRMbmcoMS4yNzgwMjkyMjg3NTY4NzM1LDEwMy44NTExNTEwODI3OTg5MiksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzYwZmYzM2E0MGQ0MjQwMDliZGVjMjJjN2Y5OWY5OTRjID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzZlNGNlYmY2OTkxZTRkYTJhYzhhZDg0ZWNhMmM4YTQ1ID0gJCgnPGRpdiBpZD0iaHRtbF82ZTRjZWJmNjk5MWU0ZGEyYWM4YWQ4NGVjYTJjOGE0NSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+V2VzdGluIEV4ZWN1dGl2ZSBDbHViIExvdW5nZTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjBmZjMzYTQwZDQyNDAwOWJkZWMyMmM3Zjk5Zjk5NGMuc2V0Q29udGVudChodG1sXzZlNGNlYmY2OTkxZTRkYTJhYzhhZDg0ZWNhMmM4YTQ1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzhhNjU3NGNhMTdiMDRiNDI5NDZjMjg4ODRhMWIwYTc3LmJpbmRQb3B1cChwb3B1cF82MGZmMzNhNDBkNDI0MDA5YmRlYzIyYzdmOTlmOTk0Yyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl82MDYwNGI0ZWQ3ODU0YjIyODc2ODI2NmFiYjBkZDZlMiA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc5NTYxMDA4MDA0NDQ1LDEwMy44NDQwMjU2MDgzNTM2NSksCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWNvbiA6IG5ldyBMLkljb24uRGVmYXVsdCgpLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZScsCiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnIzBmMGYwZicsCiAgICAgICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlNpZGVzOiA0LAogICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLAogICAgICAgICAgICAgICAgICAgIHJhZGl1czogMTAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuYWRkVG8obWFwXzM2ZjExYmNhYjIyOTRhMDRiZDkzOGZkY2Y3YWViZTUzKTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzA4MThkOTE3NDJjZTQwNmE5YTVkZjI1MmYwNTlhNjI3ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2RiMzYzMjQ1NjI5ODRhNWJiMWQxYTNlN2FiM2E3YjE4ID0gJCgnPGRpdiBpZD0iaHRtbF9kYjM2MzI0NTYyOTg0YTViYjFkMWEzZTdhYjNhN2IxOCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+WW9nYSBNb3ZlbWVudDwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMDgxOGQ5MTc0MmNlNDA2YTlhNWRmMjUyZjA1OWE2Mjcuc2V0Q29udGVudChodG1sX2RiMzYzMjQ1NjI5ODRhNWJiMWQxYTNlN2FiM2E3YjE4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyXzYwNjA0YjRlZDc4NTRiMjI4NzY4MjY2YWJiMGRkNmUyLmJpbmRQb3B1cChwb3B1cF8wODE4ZDkxNzQyY2U0MDZhOWE1ZGYyNTJmMDU5YTYyNyk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcmVndWxhcl9wb2x5Z29uX21hcmtlcl9jMjIxMmJkM2JiYTU0NGQzYjBlMzllMGM2ZDg1YjhiZCA9IG5ldyBMLlJlZ3VsYXJQb2x5Z29uTWFya2VyKAogICAgICAgICAgICAgICAgbmV3IEwuTGF0TG5nKDEuMjc3MDc0NjcwOTIyOTM5MiwxMDMuODQ3NTc5ODYwMzg1NzIpLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGljb24gOiBuZXcgTC5JY29uLkRlZmF1bHQoKSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsdWUnLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyMwZjBmMGYnLAogICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcsCiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaWRlczogNCwKICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogMCwKICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmFkZFRvKG1hcF8zNmYxMWJjYWIyMjk0YTA0YmQ5MzhmZGNmN2FlYmU1Myk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mNDI5ZDBiYWJiMDg0ZGU0YmQxYWNiYmVmOTI5NDAzMSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jYWZiMGU4OGNhYjc0NGViYWEyYTgzZjk4ZWE1YjUwNiA9ICQoJzxkaXYgaWQ9Imh0bWxfY2FmYjBlODhjYWI3NDRlYmFhMmE4M2Y5OGVhNWI1MDYiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkVuIFNha2FiYTwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZjQyOWQwYmFiYjA4NGRlNGJkMWFjYmJlZjkyOTQwMzEuc2V0Q29udGVudChodG1sX2NhZmIwZTg4Y2FiNzQ0ZWJhYTJhODNmOThlYTViNTA2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICByZWd1bGFyX3BvbHlnb25fbWFya2VyX2MyMjEyYmQzYmJhNTQ0ZDNiMGUzOWUwYzZkODViOGJkLmJpbmRQb3B1cChwb3B1cF9mNDI5ZDBiYWJiMDg0ZGU0YmQxYWNiYmVmOTI5NDAzMSk7CgogICAgICAgICAgICAKICAgICAgICAKPC9zY3JpcHQ+ onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>",
                        "text/plain": "<folium.folium.Map at 0x7f06724c9a58>"
                    },
                    "execution_count": 18,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "# create map of Singapore place  using latitude and longitude values\nmap_sg = folium.Map(location=[latitude, longitude], zoom_start=20)\n\n# add markers to map\nfor lat, lng, label in zip(SGnearby_venues['lat'], SGnearby_venues['lng'], SGnearby_venues['name']):\n    label = folium.Popup(label, parse_html=True)\n    folium.RegularPolygonMarker(\n        [lat, lng],\n        number_of_sides=4,\n        radius=10,\n        popup=label,\n        color='blue',\n        fill_color='#0f0f0f',\n        fill_opacity=0.7,\n    ).add_to(map_sg)  \n    \nmap_sg"
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": ""
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.6.9"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1
}